// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250808133159_InitialCreateWithMultilingual")]
    partial class InitialCreateWithMultilingual
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Server.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("VATRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_Articles_Category");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Articles_Code");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("IX_Articles_CurrencyId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Articles_IsActive");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("IX_Articles_UnitId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Server.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CurrencyId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Currencies_Code");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Server.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LanguageId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Languages_Code");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Server.Models.LocalizationString", b =>
                {
                    b.Property<int>("StringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StringId"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("StringKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("StringId");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("IX_LocalizationStrings_LanguageId");

                    b.HasIndex("StringKey")
                        .HasDatabaseName("IX_LocalizationStrings_StringKey");

                    b.HasIndex("StringKey", "LanguageId")
                        .IsUnique()
                        .HasDatabaseName("UK_LocalizationStrings_Key_Language");

                    b.ToTable("LocalizationStrings");
                });

            modelBuilder.Entity("Server.Models.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UnitId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Units_Code");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Server.Models.UserSetting", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("SelectedLanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("SelectedLanguageId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Server.Models.Article", b =>
                {
                    b.HasOne("Server.Models.Currency", "Currency")
                        .WithMany("Articles")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Articles_Currencies");

                    b.HasOne("Server.Models.Unit", "Unit")
                        .WithMany("Articles")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Articles_Units");

                    b.Navigation("Currency");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Server.Models.LocalizationString", b =>
                {
                    b.HasOne("Server.Models.Language", "Language")
                        .WithMany("LocalizationStrings")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_LocalizationStrings_Languages");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Server.Models.UserSetting", b =>
                {
                    b.HasOne("Server.Models.Language", "Language")
                        .WithMany("UserSettings")
                        .HasForeignKey("SelectedLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserSettings_Languages");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Server.Models.Currency", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Server.Models.Language", b =>
                {
                    b.Navigation("LocalizationStrings");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("Server.Models.Unit", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
