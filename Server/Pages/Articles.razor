@page "/articles"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Server.Models
@using Server.Services
@inject ArticleService ArticleService
@inject ILocalizationService LocalizationService
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>@pageTitle</PageTitle>

<div class="container-fluid px-4"> @* Added px-4 for horizontal padding *@
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="me-4">@pageTitle</h1> @* Added me-4 for right margin on the heading *@
                <div>
                    <span class="me-3">Welcome, @currentUser?.FullName!</span>
                    <button class="btn btn-success" @onclick="CreateNewArticle">
                        <i class="fas fa-plus"></i> @newArticleText
                    </button>
                </div>
            </div>

            <!-- Search and Filter Section -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search articles..."
                               @bind="searchTerm" @onkeypress="HandleKeyPress" />
                        <button class="btn btn-primary" @onclick="SearchArticles">
                            <i class="fas fa-search"></i> @searchButtonText
                        </button>
                    </div>
                </div>
                <div class="col-md-3">
                    <select class="form-select" value="@selectedCategory" @onchange="OnCategoryChanged">
                        <option value="">All Categories</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category">@category</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" checked="@showInactive" @onchange="OnShowInactiveChanged" />
                        <label class="form-check-label">Show Inactive</label>
                    </div>
                </div>
            </div>

            <!-- Articles Table -->
            <div class="card">
                <div class="card-body">
                    @if (articles.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>@codeHeader</th>
                                        <th>@barcodeHeader</th>
                                        <th>@descriptionHeader</th>
                                        <th>@categoryHeader</th>
                                        <th>@unitHeader</th>
                                        <th>@priceHeader</th>
                                        <th>@vatHeader</th>
                                        <th>@stockHeader</th>
                                        <th>@statusHeader</th>
                                        <th>@actionsHeader</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var article in articles)
                                    {
                                        <tr class="@(article.IsActive ? "" : "table-secondary")">
                                            <td><code>@article.Code</code></td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(article.Barcode))
                                                {
                                                    <small>@article.Barcode</small>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="fw-bold">@article.Description</div>
                                            </td>
                                            <td>@article.Category</td>
                                            <td>@article.Unit?.Description (@article.Unit?.Code)</td>
                                            <td>@article.Price.ToString("F2") @article.Currency?.Code</td>
                                            <td>
                                                <span class="badge bg-info">
                                                    @article.VATTable?.VATName (@article.VATTable?.VATRate.ToString("F1")%)
                                                </span>
                                            </td>
                                            <td>
                                                <span class="@(article.StockQuantity <= 10 ? "text-danger fw-bold" : "")">
                                                    @article.StockQuantity
                                                </span>
                                            </td>
                                            <td>
                                                @if (article.IsActive)
                                                {
                                                    <span class="badge bg-success">Active</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">Inactive</span>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-primary me-1"
                                                        @onclick="() => ViewArticle(article.Id)">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-secondary me-1"
                                                        @onclick="() => EditArticle(article.Id)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            No articles found.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ApplicationUser? currentUser;
    private List<Article> articles = new();
    private List<string> categories = new();
    private string searchTerm = string.Empty;
    private string selectedCategory = string.Empty;
    private bool showInactive = false;

    private string pageTitle = string.Empty;
    private string newArticleText = string.Empty;
    private string searchPlaceholder = string.Empty;
    private string searchButtonText = string.Empty;

    private string codeHeader = string.Empty;
    private string barcodeHeader = string.Empty;
    private string descriptionHeader = string.Empty;
    private string categoryHeader = string.Empty;
    private string unitHeader = string.Empty;
    private string priceHeader = string.Empty;
    private string vatHeader = string.Empty;
    private string stockHeader = string.Empty;
    private string statusHeader = string.Empty;
    private string actionsHeader = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            currentUser = await UserManager.GetUserAsync(authState.User);
        }

        var languageId = await LocalizationService.GetDefaultLanguageId();

        pageTitle = LocalizationService.GetString("STRING_00001", languageId) ?? "Article Management";
        newArticleText = LocalizationService.GetString("STRING_00002", languageId) ?? "New Article";
        searchPlaceholder = LocalizationService.GetString("STRING_00003", languageId) ?? "Search articles...";
        searchButtonText = LocalizationService.GetString("STRING_00004", languageId) ?? "Search";

        codeHeader = LocalizationService.GetString("STRING_00033", languageId) ?? "Code";
        barcodeHeader = LocalizationService.GetString("STRING_00010", languageId) ?? "Barcode";
        descriptionHeader = LocalizationService.GetString("STRING_00042", languageId) ?? "Description";
        categoryHeader = LocalizationService.GetString("STRING_00011", languageId) ?? "Category";
        unitHeader = LocalizationService.GetString("STRING_00012", languageId) ?? "Unit";
        priceHeader = LocalizationService.GetString("STRING_00013", languageId) ?? "Price";
        vatHeader = LocalizationService.GetString("STRING_00014", languageId) ?? "VAT";
        stockHeader = LocalizationService.GetString("STRING_00015", languageId) ?? "Stock";
        statusHeader = LocalizationService.GetString("STRING_00038", languageId) ?? "Status";
        actionsHeader = LocalizationService.GetString("STRING_00039", languageId) ?? "Actions";

        await LoadArticles();
        await LoadCategories();
    }

    private async Task LoadArticles()
    {
        articles = await ArticleService.GetAllArticlesAsync(showInactive);
    }

    private async Task LoadCategories()
    {
        categories = await ArticleService.GetCategoriesAsync();
    }

    private async Task SearchArticles()
    {
        articles = await ArticleService.SearchArticlesAsync(searchTerm, showInactive);
    }

    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategory = e.Value?.ToString() ?? string.Empty;
        if (string.IsNullOrEmpty(selectedCategory))
        {
            await LoadArticles();
        }
        else
        {
            articles = await ArticleService.GetArticlesByCategoryAsync(selectedCategory, showInactive);
        }
    }

    private async Task OnShowInactiveChanged(ChangeEventArgs e)
    {
        showInactive = bool.Parse(e.Value?.ToString() ?? "false");
        await LoadArticles();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchArticles();
        }
    }

    private void ViewArticle(int id)
    {
        Navigation.NavigateTo($"/articles/{id}");
    }

    private void EditArticle(int id)
    {
        Navigation.NavigateTo($"/articles/edit/{id}");
    }

    private void CreateNewArticle()
    {
        Navigation.NavigateTo("/articles/create");
    }
}