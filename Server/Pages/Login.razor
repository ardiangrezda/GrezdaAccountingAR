@page "/login"
@using Microsoft.AspNetCore.Identity
@using Server.Models
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@attribute [AllowAnonymous]
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Login - Accounting System</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-4">
            <div class="card mt-5">
                <div class="card-header">
                    <h3 class="text-center">Accounting System</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="loginModel" OnValidSubmit="@HandleLoginAsync">
                        <DataAnnotationsValidator />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="admin@accounting.com" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText type="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Admin123!" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox @bind-Value="loginModel.RememberMe" class="form-check-input" />
                            <label class="form-check-label">Remember me</label>
                        </div>

                        <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Login
                        </button>
                    </EditForm>
                </div>
                <div class="card-footer text-center">
                    <small class="text-muted">Demo: admin@accounting.com / Admin123!</small>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginViewModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated ?? false)
            {
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
        }
    }

    private async Task HandleLoginAsync()
    {
        if (!string.IsNullOrEmpty(loginModel.Email) && !string.IsNullOrEmpty(loginModel.Password))
        {
            isLoading = true;
            errorMessage = string.Empty;

            try
            {
                var result = await SignInManager.PasswordSignInAsync(
                    loginModel.Email,
                    loginModel.Password,
                    loginModel.RememberMe,
                    lockoutOnFailure: false);

                if (result.Succeeded)
                {
                    NavigationManager.NavigateTo("/", forceLoad: true);
                }
                else
                {
                    errorMessage = "Invalid email or password.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = "An error occurred during login.";
                Console.WriteLine($"Login error: {ex.Message}");
            }
            finally
            {
                isLoading = false;
            }
        }
    }
}

public class LoginViewModel
{
    [Required(ErrorMessage = "Email is required")]
    [EmailAddress(ErrorMessage = "Invalid email address")]
    public string Email { get; set; } = string.Empty;

    [Required(ErrorMessage = "Password is required")]
    public string Password { get; set; } = string.Empty;

    public bool RememberMe { get; set; }
}