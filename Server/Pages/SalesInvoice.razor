@page "/sales/create"
@page "/sales/create/{Category}"
@page "/sales/edit/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq
@using Server.Models
@using Server.Services
@using System.Security.Claims
@inject SalesService SalesService
@inject ArticleService ArticleService
@inject SubjectService SubjectService
@inject SalesCategoryService SalesCategoryService
@inject BusinessUnitService BusinessUnitService
@inject ILocalizationService LocalizationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject StateContainer StateContainer
@attribute [Authorize]

<style>
    .table th {
        font-size: 0.85rem;
        padding: 0.5rem;
        background-color: #4CAF50 !important;
        color: white;
    }

    .table td {
        padding: 0.25rem;
        vertical-align: middle;
        font-size: 0.85rem;
    }

    .table tr.totals-row {
        background-color: #E8F5E9;
        font-weight: bold;
    }

    .form-control-sm {
        padding: 0.25rem 0.5rem;
        height: calc(1.5em + 0.5rem + 2px);
        font-size: 0.875rem;
    }

    .input-group-sm > .form-control,
    .input-group-sm > .input-group-text {
        padding: 0.25rem 0.5rem;
        font-size: 0.85rem;
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.85rem;
    }

    .btn-remove {
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
    }

    .invoice-summary {
        background-color: #4CAF50 !important;
        color: white;
        padding: 0.5rem 1rem;
        margin-bottom: 1rem;
    }

    .total-due {
        background-color: #4CAF50 !important;
        color: white;
        padding: 0.5rem 1rem;
    }

    .form-label.small {
        font-size: 0.875rem;
        margin-bottom: 0.25rem;
    }

    .mb-2 {
        margin-bottom: 0.5rem !important;
    }

    .invalid-field {
        border-color: #dc3545;
    }

    .search-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        max-height: 300px;
        overflow-y: auto;
        z-index: 1050;
        min-width: 100%;
    }
    
    .buyer-item, .article-item {
        cursor: pointer;
        padding: 0.5rem 0.75rem;
        border-bottom: 1px solid #f8f9fa;
        transition: background-color 0.15s ease-in-out;
    }
    
    .buyer-item:hover, .article-item:hover {
        background-color: #f8f9fa;
    }
    
    .buyer-item:last-child, .article-item:last-child {
        border-bottom: none;
    }
    
    .position-relative {
        position: relative !important;
    }
    
    .table-responsive {
        overflow: visible !important;
    }
    
    .table {
        overflow: visible !important;
    }
    
    .table td {
        overflow: visible !important;
        position: relative;
    }
    
    .article-item div, .buyer-item div {
        font-size: 0.875rem;
        line-height: 1.25;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .table thead th {
        background-color: #4CAF50 !important;
        color: white !important;
        border-color: #4CAF50 !important;
    }

    .table-light th {
        background-color: #4CAF50 !important;
        color: white !important;
    }
</style>

<ErrorBoundary @ref="errorBoundary">
    <ChildContent>
        @if (sale != null && editContext != null)
        {
            <EditForm EditContext="editContext" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="invoice-page">
                    <div class="invoice-header bg-light border-bottom p-4 mb-4">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h2 class="mb-0">@pageTitle</h2>
                                <small class="text-muted">
                                    @(IsEdit? @invoiceNumberLabel + $": {sale.InvoiceNumber}" : @newInvoiceLabel)
                                    @if (currentCategoryName != null)
                                    {
                                        <span class="ms-2 badge bg-info">@currentCategoryName</span>
                                    }
                                    @if (!string.IsNullOrEmpty(currentBusinessUnitName))
                                    {
                                        <span class="ms-2 badge bg-success">@currentBusinessUnitName</span>
                                    }
                                </small>
                            </div>
                            <div class="invoice-actions">
                                <button type="button" class="btn btn-outline-secondary me-2" @onclick="GoBack">
                                    <i class="fas fa-arrow-left"></i> @backLabel
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                    }
                                    else
                                    {
                                        <i class="fas fa-save"></i>
                                    }
                                    @saveInvoiceLabel
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="container-fluid px-4">
                        <div class="card mb-4 shadow-sm">
                            <div class="card-body">
                                <!-- Compact Header Row with Dates and Buyer -->
                                <div class="row mb-4">
                                    <!-- Invoice Dates - Compact horizontal layout -->
                                    <div class="col-md-4">
                                        <div class="row">
                                            <div class="col-6">
                                                <div class="mb-2">
                                                    <label class="form-label fw-bold small">@invoiceDateLabel</label>
                                                    <InputDate @bind-Value="sale.InvoiceDate" class="form-control form-control-sm" />
                                                    <ValidationMessage For="@(() => sale.InvoiceDate)" class="text-danger small" />
                                                </div>
                                            </div>
                                            <div class="col-6">
                                                <div class="mb-2">
                                                    <label class="form-label fw-bold small">@expiryDateLabel</label>
                                                    <InputDate @bind-Value="sale.InvoiceExpiryDate" class="form-control form-control-sm" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Buyer Information - Compact -->
                                    <div class="col-md-5">
                                        <div class="mb-2">
                                            <label class="form-label fw-bold small">@buyerNameLabel</label>
                                            <div class="position-relative">
                                                <input value="@sale.BuyerName"
                                                       @oninput="HandleBuyerSearch"
                                                       class="@($"form-control form-control-sm {(sale.BuyerId <= 0 ? "invalid-field" : "")}")"
                                                       placeholder="@startTypingBuyerNameLabel" />
                                                @if (showBuyerSearch && buyerSearchResults.Any())
                                                {
                                                    <div class="search-dropdown">
                                                        @foreach (var buyer in buyerSearchResults)
                                                        {
                                                            <div class="buyer-item" @onclick="() => SelectBuyer(buyer)">
                                                                <div class="fw-bold">@buyer.SubjectName</div>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-3">
                                        <!-- Additional space -->
                                    </div>
                                </div>

                                <!-- Invoice Items -->
                                <div class="row">
                                    <div class="col-12">
                                        <h5 class="mb-3">@invoiceItemsLabel</h5>
                                        <button type="button" class="btn btn-success btn-sm mb-3" @onclick="AddNewItem">
                                            <i class="fas fa-plus"></i> @addItemLabel
                                        </button>
                                        
                                        <div class="table-responsive">
                                            <table class="table table-bordered">
                                                <thead>
                                                    <tr>
                                                        <th style="width: 40px">#</th>
                                                        <th style="width: 150px">@articleLabel</th>
                                                        <th style="width: 200px">@descriptionLabel</th>
                                                        <th style="width: 80px" class="text-end">@quantityLabel</th>
                                                        <th style="width: 80px" class="text-center">@unitLabel</th>
                                                        <th style="width: 120px" class="text-end">@priceExclLabel</th>
                                                        <th style="width: 120px" class="text-end">@priceInclLabel</th>
                                                        <th style="width: 100px" class="text-end">@discPercentLabel</th>
                                                        <th style="width: 120px" class="text-end">@discAmountLabel</th>
                                                        <th style="width: 120px" class="text-end">@valueExclLabel</th>
                                                        <th style="width: 120px" class="text-end">@valueInclLabel</th>
                                                        <th style="width: 40px"></th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @if (sale.Items != null && sale.Items.Count > 0)
                                                    {
                                                        @foreach (var (item, index) in sale.Items.Select((item, i) => (item, i + 1)))
                                                        {
                                                            <tr>
                                                                <td class="text-center">@index</td>
                                                                <td>
                                                                    <input type="text"
                                                                           class="@($"form-control form-control-sm {(string.IsNullOrEmpty(item.Barcode) ? "invalid-field" : "")}")"
                                                                           @bind="item.Barcode"
                                                                           @bind:event="oninput"
                                                                           @onblur="() => HandleBarcodeChange(item)" />
                                                                </td>
                                                                <td>
                                                                    <div class="position-relative">
                                                                        <input type="text"
                                                                               class="form-control form-control-sm"
                                                                               value="@item.Description"
                                                                               @oninput="(e) => HandleDescriptionSearch(e, item)"
                                                                               @onfocus="() => SetActiveSearchItem(item)"
                                                                               placeholder=@startTypingDescriptionLabel />
                                                                        @if (activeSearchItem == item && showArticleSearch && articleSearchResults.Any())
                                                                        {
                                                                            <div class="search-dropdown">
                                                                                @foreach (var article in articleSearchResults)
                                                                                {
                                                                                    <div class="article-item" @onclick="() => SelectArticle(article, item)">
                                                                                        <div>@article.Description</div>
                                                                                    </div>
                                                                                }
                                                                            </div>
                                                                        }
                                                                    </div>
                                                                </td>
                                                                <td>
                                                                    <input type="number"
                                                                           class="@($"form-control form-control-sm text-end {(item.Quantity <= 0 ? "invalid-field" : "")}")"
                                                                           @bind="item.Quantity"
                                                                           @bind:event="oninput"
                                                                           @onblur="() => CalculateItemTotal(item)" />
                                                                </td>
                                                                <td class="text-center">@item.UnitCode</td>
                                                                <td class="text-end">
                                                                    <input type="number" class="form-control form-control-sm text-end"
                                                                           @bind="item.PriceWithoutVAT"
                                                                           @bind:event="oninput"
                                                                           @onblur="() => CalculateItemTotal(item)"
                                                                           readonly />
                                                                </td>
                                                                <td class="text-end">
                                                                    <input type="number" class="form-control form-control-sm text-end"
                                                                           @bind="item.PriceWithVAT"
                                                                           @bind:event="oninput"
                                                                           @onblur="() => CalculateItemTotal(item)"
                                                                           readonly />
                                                                </td>
                                                                <td>
                                                                    <div class="input-group input-group-sm">
                                                                        <input type="number" class="form-control text-end"
                                                                               @bind="item.DiscountPercent"
                                                                               @bind:event="oninput"
                                                                               @onblur="() => CalculateItemTotal(item)" />
                                                                        <span class="input-group-text">%</span>
                                                                    </div>
                                                                </td>
                                                                <td class="text-end">@item.DiscountAmount.ToString("N2")</td>
                                                                <td class="text-end">@item.ValueWithoutVAT.ToString("N2")</td>
                                                                <td class="text-end">@item.ValueWithVAT.ToString("N2")</td>
                                                                <td>
                                                                    <button type="button" class="btn btn-outline-danger btn-remove" @onclick="() => RemoveItem(item)">
                                                                        <i class="fas fa-times"></i>
                                                                    </button>
                                                                </td>
                                                            </tr>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <tr>
                                                            <td colspan="12" class="text-center text-muted">
                                                                @noItemsAddedYetLabel
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                                <tfoot>
                                                    <tr class="totals-row">
                                                        <td colspan="7"></td>
                                                        <td class="text-end">@totalsLabel</td>
                                                        <td class="text-end">@sale.TotalDiscountAmount.ToString("N2")</td>
                                                        <td class="text-end">@sale.TotalWithoutVAT.ToString("N2")</td>
                                                        <td class="text-end">@sale.TotalWithVAT.ToString("N2")</td>
                                                        <td></td>
                                                    </tr>
                                                </tfoot>
                                            </table>
                                        </div>
                                    </div>
                                </div>

                                <!-- Spacer div for separation -->
                                <div class="mb-5"></div>

                                <!-- Invoice Summary Section -->
                                <div class="row section-spacing mt-5">
                                    <div class="col-md-6 offset-md-6">
                                        <div class="card">
                                            <div class="invoice-summary">
                                                <h5 class="mb-0">@invoiceSummaryLabel</h5>
                                            </div>
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between mb-2">
                                                    <span>@subtotalBeforeDiscountLabel</span>
                                                    <span class="fw-bold">@((sale.TotalWithoutVAT + sale.TotalDiscountAmount).ToString("N2"))</span>
                                                </div>
                                                <div class="d-flex justify-content-between mb-2">
                                                    <span>@totalDiscountsLabel</span>
                                                    <span class="fw-bold text-danger">-@sale.TotalDiscountAmount.ToString("N2")</span>
                                                </div>
                                                <div class="d-flex justify-content-between mb-3">
                                                    <span>@totalVatLabel</span>
                                                    <span class="fw-bold">@sale.TotalVATAmount.ToString("N2")</span>
                                                </div>
                                                <div class="total-due">
                                                    <div class="d-flex justify-content-between">
                                                        <span class="h5 mb-0">@totalDueLabel</span>
                                                        <span class="h5 mb-0">@sale.TotalWithVAT.ToString("N2")</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        }
        else if (loading)
        {
            <div class="text-center p-5">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-warning m-5">
                <h4>Unable to load invoice</h4>
                <p>The invoice you're trying to edit couldn't be loaded.</p>
                <button class="btn btn-primary" @onclick="GoBack">@backToSalesLabel</button>
            </div>
        }
    </ChildContent>
    <ErrorContent>
        <div class="alert alert-danger">
            <h4>An error occurred while processing your request</h4>
            <p>Please try again or contact support if the problem persists.</p>
            <button class="btn btn-secondary" @onclick="ResetError">Try Again</button>
            <button class="btn btn-primary ms-2" @onclick="GoBack">@backToSalesLabel</button>
        </div>
    </ErrorContent>
</ErrorBoundary>

@code {
    private Server.Models.SalesInvoice sale = new()
    {
        InvoiceDate = DateTime.Now,
        Items = new List<SalesInvoiceItem>()
    };
    private bool isSaving;
    private bool loading = true;
    private bool IsEdit => Id.HasValue;
    [Parameter] public int? Id { get; set; }
    [Parameter] public string? Category { get; set; }
    private string pageTitle = "Create Invoice";
    private ErrorBoundary? errorBoundary;
    private List<SalesCategory> salesCategories = new();

    private List<Subject> buyerSearchResults = new();
    private bool showBuyerSearch = false;

    private List<Article> articleSearchResults = new();
    private bool showArticleSearch = false;
    private SalesInvoiceItem? activeSearchItem = null;

    private EditContext? editContext;
    private string? currentCategoryName;
    private string? currentBusinessUnitName;

    // Localization strings
    private string createInvoiceLabel = string.Empty;
    private string editInvoiceLabel = string.Empty;
    private string userNotAuthenticatedLabel = string.Empty;
    private string invoiceNotFoundLabel = string.Empty;
    private string errorLoadingInvoiceLabel = string.Empty;
    private string noBusinessUnitSelectedLabel = string.Empty;
    private string invoiceCreatedSuccessfullyLabel = string.Empty;
    private string invoiceUpdatedSuccessfullyLabel = string.Empty;
    private string errorCalculatingTotalsLabel = string.Empty;
    private string errorAddingNewItemLabel = string.Empty;
    private string errorLoadingArticleLabel = string.Empty;
    private string errorSearchingArticlesLabel = string.Empty;
    private string pleaseSelectBuyerLabel = string.Empty;
    private string businessUnitRequiredLabel = string.Empty;
    private string pleaseAddOneItemLabel = string.Empty;
    private string allItemsValidArticleLabel = string.Empty;
    private string allItemsQuantityGreaterZeroLabel = string.Empty;
    private string errorLoadingCategoryNameLabel = string.Empty;
    private string errorSelectingArticleLabel = string.Empty;

    // SalesInvoice UI localization strings
    private string invoiceItemsLabel = string.Empty;
    private string saveInvoiceLabel = string.Empty;
    private string newInvoiceLabel = string.Empty;
    private string invoiceDateLabel = string.Empty;
    private string expiryDateLabel = string.Empty;
    private string buyerNameLabel = string.Empty;
    private string addItemLabel = string.Empty;
    private string articleLabel = string.Empty;
    private string quantityLabel = string.Empty;
    private string priceExclLabel = string.Empty;
    private string priceInclLabel = string.Empty;
    private string discPercentLabel = string.Empty;
    private string discAmountLabel = string.Empty;
    private string valueExclLabel = string.Empty;
    private string valueInclLabel = string.Empty;
    private string totalsLabel = string.Empty;
    private string invoiceSummaryLabel = string.Empty;
    private string subtotalBeforeDiscountLabel = string.Empty;
    private string totalDiscountsLabel = string.Empty;
    private string totalVatLabel = string.Empty;
    private string totalDueLabel = string.Empty;
    private string startTypingBuyerNameLabel = string.Empty;
    private string noItemsAddedYetLabel = string.Empty;
    private string invoiceNumberLabel = string.Empty;
    private string dateLabel = string.Empty;
    private string totalLabel = string.Empty;
    private string descriptionLabel = string.Empty;
    private string unitLabel = string.Empty;
    private string backToSalesLabel = string.Empty;
    private string startTypingDescriptionLabel = string.Empty;
    private string backLabel = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Load localization strings first - this is component initialization
        await LoadLocalizationStrings();
        
        // Then load invoice data
        await LoadInvoice();
    }

    private async Task LoadInvoice()
    {
        try
        {
            loading = true;
            
            // Now pageTitle can use the already-loaded localization strings
            pageTitle = IsEdit ? editInvoiceLabel : createInvoiceLabel;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            var currentBusinessUnitId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "currentBusinessUnit");
            int businessUnitId = 0;
            
            if (!string.IsNullOrEmpty(currentBusinessUnitId) && int.TryParse(currentBusinessUnitId, out businessUnitId))
            {
                try
                {
                    var businessUnits = await BusinessUnitService.GetAllAsync();
                    var businessUnit = businessUnits?.FirstOrDefault(bu => bu.Id == businessUnitId);
                    currentBusinessUnitName = businessUnit?.Name ?? $"Business Unit {businessUnitId}";
                }
                catch (Exception ex)
                {
                    await JSRuntime.InvokeVoidAsync("console.error", "Error loading business unit name", ex.Message);
                    currentBusinessUnitName = $"Business Unit {businessUnitId}";
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", noBusinessUnitSelectedLabel);
                Navigation.NavigateTo("/login");
                return;
            }

            if (!IsEdit)
            {
                var storedCategoryId = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "selectedSalesCategoryId");
                
                await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "selectedSalesCategoryId");

                var categoryId = !string.IsNullOrEmpty(storedCategoryId) && int.TryParse(storedCategoryId, out var id) 
                    ? id 
                    : 1;

                sale = new Server.Models.SalesInvoice
                {
                    InvoiceDate = DateTime.Now,
                    Items = new List<SalesInvoiceItem>(),
                    CreatedByUserId = userId ?? throw new InvalidOperationException(userNotAuthenticatedLabel),
                    CreatedAt = DateTime.UtcNow,
                    SalesCategoryId = categoryId,
                    BusinessUnitId = businessUnitId
                };
            }
            else if (Id.HasValue)
            {
                try
                {
                    var loadedSale = await SalesService.GetSaleByIdAsync(Id.Value);
                    if (loadedSale != null)
                    {
                        sale = new Server.Models.SalesInvoice
                        {
                            Id = loadedSale.Id,
                            InvoiceNumber = loadedSale.InvoiceNumber,
                            InvoiceDate = loadedSale.InvoiceDate,
                            InvoiceExpiryDate = loadedSale.InvoiceExpiryDate,
                            BuyerId = loadedSale.BuyerId,
                            BuyerCode = loadedSale.BuyerCode,
                            BuyerName = loadedSale.BuyerName,
                            IsCancelled = loadedSale.IsCancelled,
                            CancellationReason = loadedSale.CancellationReason,
                            IsPosted = loadedSale.IsPosted,
                            PostedDate = loadedSale.PostedDate,
                            CreatedByUserId = loadedSale.CreatedByUserId,
                            CreatedAt = loadedSale.CreatedAt,
                            LastModifiedByUserId = loadedSale.LastModifiedByUserId,
                            LastModifiedAt = loadedSale.LastModifiedAt,
                            SalesCategoryId = loadedSale.SalesCategoryId,
                            BusinessUnitId = loadedSale.BusinessUnitId,
                            TotalWithoutVAT = loadedSale.TotalWithoutVAT,
                            TotalVATAmount = loadedSale.TotalVATAmount,
                            TotalWithVAT = loadedSale.TotalWithVAT,
                            TotalDiscountAmount = loadedSale.TotalDiscountAmount,
                            Items = new List<SalesInvoiceItem>()
                        };

                        if (loadedSale.Items != null)
                        {
                            foreach (var sourceItem in loadedSale.Items)
                            {
                                var item = new SalesInvoiceItem
                                {
                                    Id = sourceItem.Id,
                                    SalesInvoiceId = sourceItem.SalesInvoiceId,
                                    ArticleId = sourceItem.ArticleId,
                                    Barcode = sourceItem.Barcode,
                                    ArticleCode = sourceItem.ArticleCode,
                                    Description = sourceItem.Description,
                                    Quantity = sourceItem.Quantity,
                                    UnitId = sourceItem.UnitId,
                                    UnitCode = sourceItem.UnitCode,
                                    PriceWithoutVAT = sourceItem.PriceWithoutVAT,
                                    PriceWithVAT = sourceItem.PriceWithVAT,
                                    DiscountPercent = sourceItem.DiscountPercent,
                                    DiscountAmount = sourceItem.DiscountAmount,
                                    VATPercent = sourceItem.VATPercent,
                                    VATAmount = sourceItem.VATAmount,
                                    ValueWithoutVAT = sourceItem.ValueWithoutVAT,
                                    ValueWithVAT = sourceItem.ValueWithVAT,
                                    CurrencyId = sourceItem.CurrencyId,
                                    CurrencyCode = sourceItem.CurrencyCode,
                                    ExchangeRate = sourceItem.ExchangeRate
                                };
                                
                                sale.Items.Add(item);
                            }
                        }
                    }
                    else
                    {
                        await JSRuntime.InvokeVoidAsync("alert", invoiceNotFoundLabel);
                        Navigation.NavigateTo("/sales");
                        return;
                    }
                }
                catch (Exception ex)
                {
                    await JSRuntime.InvokeVoidAsync("console.error", "Error loading invoice", ex.Message);
                    await JSRuntime.InvokeVoidAsync("alert", $"{errorLoadingInvoiceLabel}: {ex.Message}");
                    Navigation.NavigateTo("/sales");
                    return;
                }
            }

            editContext = new EditContext(sale);
            editContext.OnValidationStateChanged += ValidationStateChanged;

            await LoadCategoryName();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error initializing page", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private void ValidationStateChanged(object? sender, ValidationStateChangedEventArgs e)
    {
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (isSaving) return;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (sale.BusinessUnitId <= 0)
            {
                var currentBusinessUnitId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "currentBusinessUnit");
                if (!string.IsNullOrEmpty(currentBusinessUnitId) && int.TryParse(currentBusinessUnitId, out var businessUnitId))
                {
                    sale.BusinessUnitId = businessUnitId;
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", noBusinessUnitSelectedLabel);
                    Navigation.NavigateTo("/login");
                    return;
                }
            }

            if (!await ValidateInvoice()) return;

            isSaving = true;
            StateHasChanged();

            try
            {
                var categories = await StateContainer.GetSalesCategoriesAsync();
                var category = categories.FirstOrDefault(c => c.Id == sale.SalesCategoryId);
                var categoryRoute = category?.Code != null ? GetCategoryRoute(category.Code) : "sales";

                if (!IsEdit)
                {
                    await SalesService.CreateSaleAsync(sale);
                    await JSRuntime.InvokeVoidAsync("alert", invoiceCreatedSuccessfullyLabel);
                }
                else
                {
                    await SalesService.UpdateSaleAsync(sale, userId);
                    await JSRuntime.InvokeVoidAsync("alert", invoiceUpdatedSuccessfullyLabel);
                }

                Navigation.NavigateTo($"/{categoryRoute}");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"{errorLoadingInvoiceLabel}: {ex.Message}");
            }
            finally
            {
                isSaving = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
    }

    private async Task GoBack()
    {
        try
        {
            var categories = await StateContainer.GetSalesCategoriesAsync();
            var category = categories.FirstOrDefault(c => c.Id == sale.SalesCategoryId);
            
            if (category?.Code != null)
            {
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "currentSalesCategory", category.Code);
                
                var categoryRoute = GetCategoryRoute(category.Code);
                Navigation.NavigateTo($"/{categoryRoute}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "currentSalesCategory");
                Navigation.NavigateTo("/sales");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "currentSalesCategory");
            Navigation.NavigateTo("/sales");
        }
    }

    private string GetCategoryRoute(string code)
    {
        return code.ToLower() switch
        {
            "dom" => "sales/domestic",
            "cash" => "sales/cash",
            "exp" => "sales/export",
            "del" => "sales/delivery",
            "serv" => "sales/service",
            "cn" => "sales/credit-note",
            "ret" => "sales/returns",
            "other" => "sales/other",
            "sum" => "sales/summary",
            "print" => "sales/printing",
            "bar" => "sales/barcode",
            _ => "sales"
        };
    }

    private async void ResetError()
    {
        errorBoundary?.Recover();
        await LoadInvoice();
    }

    private void RemoveItem(SalesInvoiceItem item)
    {
        sale.Items.Remove(item);
        RecalculateTotals();
    }

    private async Task HandleBuyerCodeChange(string buyerCode)
    {
        if (string.IsNullOrEmpty(buyerCode)) return;

        var buyer = await SubjectService.GetSubjectByCodeAsync(buyerCode);
        if (buyer != null)
        {
            sale.BuyerId = buyer.Id;
            sale.BuyerCode = buyer.Code;
            sale.BuyerName = buyer.SubjectName;
        }
    }

    private async Task CalculateItemTotal(SalesInvoiceItem item)
    {
        try
        {
            if (item.PriceWithVAT <= 0 || item.Quantity <= 0) return;

            item.PriceWithoutVAT = Math.Round(item.PriceWithVAT / (1 + (item.VATPercent / 100)), 2);
            item.ValueWithoutVAT = Math.Round(item.Quantity * item.PriceWithoutVAT, 2);
            item.DiscountAmount = Math.Round(item.ValueWithoutVAT * (item.DiscountPercent / 100), 2);
            decimal netValueAfterDiscount = item.ValueWithoutVAT - item.DiscountAmount;
            item.VATAmount = Math.Round(netValueAfterDiscount * (item.VATPercent / 100), 2);

            if (item.DiscountPercent == 0)
            {
                item.ValueWithVAT = item.Quantity * item.PriceWithVAT;
            }
            else
            {
                item.ValueWithVAT = netValueAfterDiscount + item.VATAmount;
            }

            RecalculateTotals();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", errorCalculatingTotalsLabel, ex.Message);
        }
    }

    private async Task AddNewItem()
    {
        try
        {
            sale.Items ??= new List<SalesInvoiceItem>();
            
            var newItem = new SalesInvoiceItem
            {
                SalesInvoiceId = sale.Id,
                Quantity = 1,
                CurrencyCode = "EUR",
                ExchangeRate = 1,
                VATPercent = 0,
                DiscountPercent = 0,
                PriceWithVAT = 0,
                PriceWithoutVAT = 0,
                ValueWithVAT = 0,
                ValueWithoutVAT = 0,
                DiscountAmount = 0,
                VATAmount = 0,
                ArticleId = 0,
                ArticleCode = "",
                Description = "",
                UnitId = 0,
                UnitCode = "",
                CurrencyId = 0,
                Barcode = ""
            };
            
            sale.Items.Add(newItem);
            
            editContext = new EditContext(sale);
            editContext.OnValidationStateChanged += ValidationStateChanged;
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", errorAddingNewItemLabel, ex.Message);
        }
    }

    private void RecalculateTotals()
    {
        if (sale.Items == null || !sale.Items.Any())
        {
            sale.TotalWithoutVAT = 0;
            sale.TotalDiscountAmount = 0;
            sale.TotalVATAmount = 0;
            sale.TotalWithVAT = 0;
            return;
        }

        sale.TotalWithoutVAT = sale.Items.Sum(i => i.ValueWithoutVAT);
        sale.TotalDiscountAmount = sale.Items.Sum(i => i.DiscountAmount);
        sale.TotalVATAmount = sale.Items.Sum(i => i.VATAmount);
        sale.TotalWithVAT = sale.Items.Sum(i => i.ValueWithVAT);
    }

    private async Task HandleBarcodeChange(SalesInvoiceItem item)
    {
        try
        {
            if (string.IsNullOrEmpty(item.Barcode)) return;

            var article = await ArticleService.GetArticleByBarcodeAsync(item.Barcode);
            if (article != null)
            {
                item.ArticleId = article.Id;
                item.ArticleCode = article.Code;
                item.Description = article.Description;
                item.PriceWithVAT = article.Price;
                item.UnitId = article.UnitId;
                item.UnitCode = article.Unit?.Code ?? "";
                item.VATPercent = article.VATTable?.VATRate ?? 0;
                item.CurrencyId = article.CurrencyId;
                item.CurrencyCode = article.Currency?.Code ?? "EUR";

                if (item.Quantity <= 0) item.Quantity = 1;

                await CalculateItemTotal(item);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", errorLoadingArticleLabel, ex.Message);
        }
    }

    private async Task HandleBuyerSearch(ChangeEventArgs e)
    {
        var searchTerm = e.Value?.ToString();
        sale.BuyerName = searchTerm ?? string.Empty;

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            buyerSearchResults.Clear();
            showBuyerSearch = false;
            return;
        }

        buyerSearchResults = await SubjectService.SearchBuyersAsync(searchTerm);
        showBuyerSearch = true;
        StateHasChanged();
    }

    private void SelectBuyer(Subject buyer)
    {
        if (buyer == null) return;

        sale.BuyerId = buyer.Id;
        sale.BuyerCode = buyer.Code;
        sale.BuyerName = buyer.SubjectName;

        showBuyerSearch = false;
        buyerSearchResults.Clear();
        StateHasChanged();
    }

    private async Task HandleDescriptionSearch(ChangeEventArgs e, SalesInvoiceItem item)
    {
        var searchTerm = e.Value?.ToString();
        item.Description = searchTerm ?? string.Empty;

        if (string.IsNullOrWhiteSpace(searchTerm) || searchTerm.Length < 2)
        {
            articleSearchResults.Clear();
            showArticleSearch = false;
            return;
        }

        try
        {
            articleSearchResults = await ArticleService.SearchArticlesAsync(searchTerm);
            showArticleSearch = articleSearchResults.Any();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", errorSearchingArticlesLabel, ex.Message);
        }
    }

    private async Task<bool> ValidateInvoice()
    {
        if (sale.BuyerId <= 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", pleaseSelectBuyerLabel);
            return false;
        }

        if (sale.BusinessUnitId <= 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", businessUnitRequiredLabel);
            return false;
        }

        if (sale.Items == null || !sale.Items.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", pleaseAddOneItemLabel);
            return false;
        }

        foreach (var item in sale.Items)
        {
            if (item.ArticleId <= 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", allItemsValidArticleLabel);
                return false;
            }

            if (item.Quantity <= 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", allItemsQuantityGreaterZeroLabel);
                return false;
            }
        }

        return true;
    }

    /*
     * Comment for now
     * Allow negative stocks for articles
    private async Task<bool> ValidateStockAvailability()
    {
        if (sale.Items == null || !sale.Items.Any()) return true;

        var stockRequests = sale.Items
            .Where(item => item.ArticleId > 0)
            .Select(item => (item.ArticleId, item.Quantity))
            .ToList();

        if (!stockRequests.Any()) return true;

        try
        {
            var stockCheck = await ArticleService.CheckStockAvailabilityAsync(stockRequests);
            var insufficientStock = stockCheck.Where(s => !s.hasEnoughStock).ToList();

            if (insufficientStock.Any())
            {
                var errorMessage = "Insufficient stock for the following articles:\\n" +
                    string.Join("\\n", insufficientStock.Select(s => 
                        $"- {s.articleCode}: Available {s.availableStock}, Required {s.requestedStock}"));
                
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
                return false;
            }

            return true;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error checking stock availability: {ex.Message}");
            return false;
        }
    }
     */

    private async Task LoadCategoryName()
    {
        try
        {
            if (sale.SalesCategoryId > 0)
            {
                var categories = await StateContainer.GetSalesCategoriesAsync();
                var category = categories.FirstOrDefault(c => c.Id == sale.SalesCategoryId);
                if (category?.NameString?.StringKey != null)
                {
                    var languageId = await LocalizationService.GetDefaultLanguageId();
                    currentCategoryName = LocalizationService.GetString(category.NameString.StringKey, languageId);
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", errorLoadingCategoryNameLabel, ex.Message);
        }
    }

    private void SetActiveSearchItem(SalesInvoiceItem item)
    {
        activeSearchItem = item;
    }

    private async Task SelectArticle(Article article, SalesInvoiceItem item)
    {
        if (article == null || item == null) return;

        try
        {
            item.ArticleId = article.Id;
            item.ArticleCode = article.Code;
            item.Description = article.Description;
            item.Barcode = article.Barcode ?? "";
            item.PriceWithVAT = article.Price;
            item.UnitId = article.UnitId;
            item.UnitCode = article.Unit?.Code ?? "";
            item.VATPercent = article.VATTable?.VATRate ?? 0;
            item.CurrencyId = article.CurrencyId;
            item.CurrencyCode = article.Currency?.Code ?? "EUR";

            if (item.Quantity <= 0) item.Quantity = 1;

            showArticleSearch = false;
            articleSearchResults.Clear();
            activeSearchItem = null;

            await CalculateItemTotal(item);
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", errorSelectingArticleLabel, ex.Message);
        }
    }

    private async Task LoadLocalizationStrings()
    {
        var languageId = await LocalizationService.GetDefaultLanguageId();

        createInvoiceLabel = LocalizationService.GetString("STRING_00097", languageId) ?? "Create Invoice";
        editInvoiceLabel = LocalizationService.GetString("STRING_00098", languageId) ?? "Edit Invoice";
        userNotAuthenticatedLabel = LocalizationService.GetString("STRING_00099", languageId) ?? "User is not authenticated";
        invoiceNotFoundLabel = LocalizationService.GetString("STRING_00100", languageId) ?? "Invoice not found";
        errorLoadingInvoiceLabel = LocalizationService.GetString("STRING_00101", languageId) ?? "Error loading invoice";
        noBusinessUnitSelectedLabel = LocalizationService.GetString("STRING_00102", languageId) ?? "No business unit selected. Please log in again.";
        invoiceCreatedSuccessfullyLabel = LocalizationService.GetString("STRING_00103", languageId) ?? "Invoice created successfully!";
        invoiceUpdatedSuccessfullyLabel = LocalizationService.GetString("STRING_00104", languageId) ?? "Invoice updated successfully!";
        errorCalculatingTotalsLabel = LocalizationService.GetString("STRING_00105", languageId) ?? "Error calculating totals";
        errorAddingNewItemLabel = LocalizationService.GetString("STRING_00106", languageId) ?? "Error adding new item";
        errorLoadingArticleLabel = LocalizationService.GetString("STRING_00107", languageId) ?? "Error loading article";
        errorSearchingArticlesLabel = LocalizationService.GetString("STRING_00108", languageId) ?? "Error searching articles";
        pleaseSelectBuyerLabel = LocalizationService.GetString("STRING_00109", languageId) ?? "Please select a buyer.";
        businessUnitRequiredLabel = LocalizationService.GetString("STRING_00110", languageId) ?? "Business unit is required. Please log out and log in again.";
        pleaseAddOneItemLabel = LocalizationService.GetString("STRING_00111", languageId) ?? "Please add at least one item.";
        allItemsValidArticleLabel = LocalizationService.GetString("STRING_00112", languageId) ?? "All items must have a valid article.";
        allItemsQuantityGreaterZeroLabel = LocalizationService.GetString("STRING_00113", languageId) ?? "All items must have a quantity greater than zero.";
        errorLoadingCategoryNameLabel = LocalizationService.GetString("STRING_00114", languageId) ?? "Error loading category name";
        errorSelectingArticleLabel = LocalizationService.GetString("STRING_00115", languageId) ?? "Error selecting article";
        invoiceItemsLabel = LocalizationService.GetString("STRING_00116", languageId) ?? "Invoice Items";
        saveInvoiceLabel = LocalizationService.GetString("STRING_00117", languageId) ?? "Save Invoice";
        newInvoiceLabel = LocalizationService.GetString("STRING_00118", languageId) ?? "New Invoice";
        invoiceDateLabel = LocalizationService.GetString("STRING_00119", languageId) ?? "Invoice Date";
        expiryDateLabel = LocalizationService.GetString("STRING_00120", languageId) ?? "Expiry Date";
        buyerNameLabel = LocalizationService.GetString("STRING_00121", languageId) ?? "Buyer Name";
        addItemLabel = LocalizationService.GetString("STRING_00122", languageId) ?? "Add Item";
        articleLabel = LocalizationService.GetString("STRING_00123", languageId) ?? "Article";
        quantityLabel = LocalizationService.GetString("STRING_00124", languageId) ?? "QTY";
        priceExclLabel = LocalizationService.GetString("STRING_00125", languageId) ?? "Price Excl.";
        priceInclLabel = LocalizationService.GetString("STRING_00126", languageId) ?? "Price Incl.";
        discPercentLabel = LocalizationService.GetString("STRING_00127", languageId) ?? "Disc. %";
        discAmountLabel = LocalizationService.GetString("STRING_00128", languageId) ?? "Disc. Amount";
        valueExclLabel = LocalizationService.GetString("STRING_00129", languageId) ?? "Value Excl.";
        valueInclLabel = LocalizationService.GetString("STRING_00130", languageId) ?? "Value Incl.";
        totalsLabel = LocalizationService.GetString("STRING_00131", languageId) ?? "Totals";
        invoiceSummaryLabel = LocalizationService.GetString("STRING_00132", languageId) ?? "INVOICE SUMMARY";
        subtotalBeforeDiscountLabel = LocalizationService.GetString("STRING_00133", languageId) ?? "Subtotal (before discount):";
        totalDiscountsLabel = LocalizationService.GetString("STRING_00134", languageId) ?? "Total Discounts:";
        totalVatLabel = LocalizationService.GetString("STRING_00135", languageId) ?? "Total VAT:";
        totalDueLabel = LocalizationService.GetString("STRING_00136", languageId) ?? "TOTAL DUE:";
        startTypingBuyerNameLabel = LocalizationService.GetString("STRING_00137", languageId) ?? "Start typing buyer name...";
        noItemsAddedYetLabel = LocalizationService.GetString("STRING_00138", languageId) ?? "No items added yet.";
        invoiceNumberLabel = LocalizationService.GetString("STRING_00139", languageId) ?? "Invoice #";
        dateLabel = LocalizationService.GetString("STRING_00140", languageId) ?? "Date";
        totalLabel = LocalizationService.GetString("STRING_00141", languageId) ?? "Total";
        descriptionLabel = LocalizationService.GetString("STRING_00028", languageId) ?? "Description";
        unitLabel = LocalizationService.GetString("STRING_00013", languageId) ?? "Unit";
        backToSalesLabel = LocalizationService.GetString("STRING_00151", languageId) ?? "Back to Sales";
        startTypingDescriptionLabel = LocalizationService.GetString("STRING_00143", languageId) ?? "Start typing description...";
        backLabel = LocalizationService.GetString("STRING_00142", languageId) ?? "Back";
    }
}