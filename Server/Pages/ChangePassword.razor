@page "/change-password"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<h2>Change Password</h2>

<EditForm Model="@model" OnValidSubmit="HandleChangePassword">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div style="max-width: 550px; margin: 30px auto; border: 1px solid #ddd; border-radius: 12px; padding: 36px 40px; background: #fafbfc;">
        <table style="width:100%;">
            <tr>
                <td style="padding:12px 8px; width: 180px;"><label>Current Password</label></td>
                <td style="padding:12px 8px;">
                    <InputText @bind-Value="model.CurrentPassword" type="password" class="form-control" style="width:220px;" autocomplete="current-password" />
                </td>
            </tr>
            <tr>
                <td style="padding:12px 8px;"><label>New Password</label></td>
                <td style="padding:12px 8px;">
                    <InputText @bind-Value="model.NewPassword" type="password" class="form-control" style="width:220px;" autocomplete="new-password" />
                </td>
            </tr>
            <tr>
                <td style="padding:12px 8px;"><label>Repeat New Password</label></td>
                <td style="padding:12px 8px;">
                    <InputText @bind-Value="model.ConfirmPassword" type="password" class="form-control" style="width:220px;" autocomplete="new-password" />
                </td>
            </tr>
            <tr>
                <td></td>
                <td style="padding:16px 8px 0 8px;">
                    <div style="display:flex; gap:12px;">
                        <button type="submit" class="btn btn-primary">Change Password</button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    </div>
                </td>
            </tr>
        </table>
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert @(success ? "alert-success" : "alert-danger") mt-3" role="alert">
                @message
            </div>
        }
    </div>
</EditForm>

@code {
    private ChangePasswordModel model = new();
    private string message = "";
    private bool success = false;

    private async Task HandleChangePassword()
    {
        var user = await UserManager.GetUserAsync(SignInManager.Context.User);
        if (user == null)
        {
            message = "User not found.";
            success = false;
            return;
        }

        if (model.NewPassword != model.ConfirmPassword)
        {
            message = "New passwords do not match.";
            success = false;
            return;
        }

        var result = await UserManager.ChangePasswordAsync(user, model.CurrentPassword, model.NewPassword);

        if (result.Succeeded)
        {
            message = "Password changed successfully.";
            success = true;
            await JSRuntime.InvokeVoidAsync("alert", message);
            Navigation.NavigateTo("/");
        }
        else
        {
            message = string.Join(" ", result.Errors.Select(e => e.Description));
            success = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    public class ChangePasswordModel
    {
        [Required]
        public string CurrentPassword { get; set; }
        [Required]
        [MinLength(6)]
        public string NewPassword { get; set; }
        [Required]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
    }
}