@page "/admin/business-units/create"
@page "/admin/business-units/edit/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using Server.Models
@using Server.Services
@inject BusinessUnitService businessUnitService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<div class="container-fluid px-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0">@(IsEdit ? "Edit Business Unit" : "New Business Unit")</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="businessUnit" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Code</label>
                                <InputText @bind-Value="businessUnit.Code" class="form-control" />
                                <ValidationMessage For="@(() => businessUnit.Code)" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Name</label>
                                <InputText @bind-Value="businessUnit.Name" class="form-control" />
                                <ValidationMessage For="@(() => businessUnit.Name)" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Description</label>
                                <InputTextArea @bind-Value="businessUnit.Description" class="form-control" rows="3" />
                                <ValidationMessage For="@(() => businessUnit.Description)" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Address</label>
                                <InputTextArea @bind-Value="businessUnit.Address" class="form-control" rows="3" />
                                <ValidationMessage For="@(() => businessUnit.Address)" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="businessUnit.IsActive" class="form-check-input" id="isActive" />
                                    <label class="form-check-label" for="isActive">Is Active</label>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <button type="submit" class="btn btn-primary me-2">Save</button>
                                <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancel</button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? Id { get; set; }
    private bool IsEdit => Id.HasValue;
    private BusinessUnit businessUnit = new();

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit && Id.HasValue)
        {
            var existingUnit = await businessUnitService.GetByIdAsync(Id.Value);
            if (existingUnit != null)
            {
                businessUnit = existingUnit;
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (IsEdit)
            {
                await businessUnitService.UpdateAsync(businessUnit);
                await JSRuntime.InvokeVoidAsync("alert", "Business unit updated successfully!");
            }
            else
            {
                await businessUnitService.CreateAsync(businessUnit);
                await JSRuntime.InvokeVoidAsync("alert", "Business unit created successfully!");
            }
            GoBack();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving business unit: {ex.Message}");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/admin/business-units");
    }
}
