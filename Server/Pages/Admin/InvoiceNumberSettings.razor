@page "/admin/invoice-number-settings"
@using Server.Models
@using Server.Services
@inject InvoiceNumberService InvoiceNumberService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]

<div class="container-fluid px-4">
    <div class="card">
        <div class="card-header">
            <h3>Invoice Number Format Settings</h3>
        </div>
        <div class="card-body">
            <EditForm Model="format" OnValidSubmit="SaveFormat">
                <DataAnnotationsValidator />

                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="form-group">
                            <h4>Format Components</h4>
                            <div class="form-check mb-2">
                                <InputCheckbox @bind-Value="format.UseYear" class="form-check-input" id="useYear" />
                                <label class="form-check-label" for="useYear">
                                    Include Year (e.g., 25)
                                </label>
                            </div>

                            <div class="form-check mb-2">
                                <InputCheckbox @bind-Value="format.UseSalesCategoryCode" class="form-check-input" id="useSalesCategory" />
                                <label class="form-check-label" for="useSalesCategory">
                                    Include Sales Category Code (e.g., SHV)
                                </label>
                            </div>

                            <div class="form-check mb-2">
                                <InputCheckbox @bind-Value="format.UseBusinessUnitCode" class="form-check-input" id="useBusinessUnit" />
                                <label class="form-check-label" for="useBusinessUnit">
                                    Include Business Unit Code (e.g., 003)
                                </label>
                            </div>

                            <div class="form-check mb-2">
                                <InputCheckbox @bind-Value="format.UseSequentialNumber" class="form-check-input" id="useSequential" />
                                <label class="form-check-label" for="useSequential">
                                    Include Sequential Number (e.g., 5055)
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group mb-3">
                            <label>Separator</label>
                            <InputText @bind-Value="format.Separator" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label>Sequential Number Length</label>
                            <InputNumber @bind-Value="format.SequentialNumberLength" class="form-control" />
                        </div>
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-12">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h5>Preview</h5>
                                <p class="lead mb-0">@GetPreviewFormat()</p>
                            </div>
                        </div>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary">Save Format</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private InvoiceNumberFormat format = new();

    protected override async Task OnInitializedAsync()
    {
        var savedFormat = await InvoiceNumberService.GetCurrentFormatAsync();
        if (savedFormat != null)
        {
            format = savedFormat;
        }
    }

    private string GetPreviewFormat()
    {
        var parts = new List<string>();

        if (format.UseYear)
            parts.Add("25");
        if (format.UseSalesCategoryCode)
            parts.Add("SHV");
        if (format.UseBusinessUnitCode)
            parts.Add("003");
        if (format.UseSequentialNumber)
            parts.Add(new string('0', format.SequentialNumberLength));

        return string.Join(format.Separator, parts);
    }

    private async Task SaveFormat()
    {
        try
        {
            await InvoiceNumberService.SaveFormatAsync(format);
            await JSRuntime.InvokeVoidAsync("alert", "Invoice number format saved successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving format: {ex.Message}");
        }
    }
}
