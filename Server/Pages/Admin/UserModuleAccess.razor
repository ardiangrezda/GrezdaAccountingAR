@page "/admin/user-module-access"
@using Server.Models
@using Server.Services
@using Microsoft.AspNetCore.Identity
@inject UserModuleAccessService UserModuleAccessService
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager

@attribute [Authorize(Roles = "Admin")]

<h3>Manage User Module Access</h3>

<div class="row">
    <div class="col-md-4">
        <div class="mb-2">
            <input class="form-control" placeholder="Search users..." @bind="searchTerm" />
        </div>

        @if (users == null)
        {
            <p>Loading users...</p>
        }
        else
        {
            <div class="user-list mb-2">
                <div class="user-list-header">
                    <div class="user-list-col-username">Username</div>
                    <div class="user-list-col-role text-end">Role</div>
                </div>

                <div class="user-list-body">
                    @foreach (var user in FilteredUsers)
                    {
                        <button class="list-item-btn @(selectedUser?.Id == user.Id ? "active" : "")"
                                @onclick="() => SelectUser(user)">
                            <div class="user-row">
                                <div>
                                    <strong>@user.UserName</strong>
                                </div>
                                <div class="text-end text-secondary user-role">@GetUserRoleDisplay(user.Id)</div>
                            </div>
                        </button>
                    }
                </div>
            </div>
        }
    </div>

    <div class="col-md-8">
        @if (selectedUser == null)
        {
            <p class="text-muted">Select a user on the left to configure module access.</p>
        }
        else if (modules == null)
        {
            <p>Loading modules...</p>
        }
        else
        {
            <div class="card">
                <div class="card-header">
                    Configuring access for: <strong>@selectedUser.UserName</strong> (@selectedUser.Email)
                </div>
                <div class="card-body">
                    @foreach (var module in modules)
                    {
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox"
                                       id="@($"module_{module.Id}")"
                                       @bind="currentAccess.Modules[module.Id]" />
                                <label class="form-check-label" for="@($"module_{module.Id}")">
                                    @module.Name
                                </label>
                            </div>

                            @if (module.Submodules?.Any() == true)
                            {
                                <div class="ms-4 mt-2">
                                    <ul class="list-unstyled mb-0">
                                        @foreach (var sub in module.Submodules)
                                        {
                                            <li>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox"
                                                           id="@($"sub_{sub.Id}")"
                                                           @bind="currentAccess.Submodules[sub.Id]" />
                                                    <label class="form-check-label" for="@($"sub_{sub.Id}")">
                                                        @sub.Name
                                                    </label>
                                                </div>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="card-footer d-flex justify-content-end">
                    <button class="btn btn-secondary me-2" @onclick="ReloadUserAccess" type="button">Reload</button>
                    <button class="btn btn-primary" @onclick="SaveAccess" type="button">Save</button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<ApplicationUser> users = null!;
    private List<Module> modules = null!;
    private string searchTerm = "";
    private ApplicationUser? selectedUser;
    private UserAccessViewModel currentAccess = new();
    private readonly Dictionary<string, UserAccessViewModel> accessCache = new();

    private readonly Dictionary<string, string> userRoles = new();


    private IEnumerable<ApplicationUser> FilteredUsers =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? users
            : users.Where(u => (u.UserName ?? "").Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        users = await UserModuleAccessService.GetUsersAsync();
        modules = await UserModuleAccessService.GetModulesAsync();

        var ids = users.Select(u => u.Id).ToList();
        var rolesMap = await UserModuleAccessService.GetRolesForUsersAsync(ids);

        foreach (var u in users)
        {
            userRoles[u.Id] = rolesMap.TryGetValue(u.Id, out var roles) && !string.IsNullOrEmpty(roles)
                ? roles
                : string.Empty;
        }
    }

    private string GetUserRoleDisplay(string userId)
    {
        if (userRoles.TryGetValue(userId, out var roles) && !string.IsNullOrEmpty(roles))
            return roles;
        return "No role";
    }

    private async Task SelectUser(ApplicationUser user)
    {
        if (selectedUser?.Id == user.Id)
            return;

        selectedUser = user;

        if (accessCache.TryGetValue(user.Id, out var cached))
        {
            currentAccess = CloneAccess(cached);
            return;
        }

        // Initialize default access structure
        currentAccess = new UserAccessViewModel
        {
            Modules = modules.ToDictionary(m => m.Id, _ => false),
            Submodules = modules.SelectMany(m => m.Submodules ?? Enumerable.Empty<Submodule>())
                                .ToDictionary(s => s.Id, _ => false)
        };

        // Load allowed module/submodule entries for the selected user (single DB call)
        var accessEntries = await UserModuleAccessService.GetUserAccessEntriesAsync(user.Id);
        foreach (var entry in accessEntries)
        {
            if (entry.SubmoduleId == null)
            {
                // module-level access
                if (currentAccess.Modules.ContainsKey(entry.ModuleId))
                    currentAccess.Modules[entry.ModuleId] = true;
            }
            else
            {
                // submodule-level access
                var subId = entry.SubmoduleId.Value;
                if (currentAccess.Submodules.ContainsKey(subId))
                    currentAccess.Submodules[subId] = true;
            }
        }

        // Cache the initial loaded state
        accessCache[user.Id] = CloneAccess(currentAccess);
    }

    private async Task SaveAccess()
    {

        if (selectedUser == null)
        {
            return;
        }

        await UserModuleAccessService.SaveUserAccessAsync(selectedUser.Id, currentAccess);
        accessCache[selectedUser.Id] = CloneAccess(currentAccess);
   }

    private async Task ReloadUserAccess()
    {
        if (selectedUser == null) return;
        accessCache.Remove(selectedUser.Id);
        await SelectUser(selectedUser);
    }

    private static UserAccessViewModel CloneAccess(UserAccessViewModel src)
    {
        return new UserAccessViewModel
        {
            Modules = src.Modules.ToDictionary(kv => kv.Key, kv => kv.Value),
            Submodules = src.Submodules.ToDictionary(kv => kv.Key, kv => kv.Value)
        };
    }
}

<style>
    /* List-like left column with aligned Username / Role columns */
    .user-list {
        border: 1px solid #dee2e6;
        border-radius: .375rem;
        overflow: hidden;
    }

    .user-list-header {
        background-color: #f8f9fa;
        color: #212529;
        font-weight: 600;
        display: grid;
        grid-template-columns: 1fr 140px;
        align-items: center;
        padding: .5rem .75rem;
        border-bottom: 1px solid #dee2e6;
    }

    .user-list-body {
        max-height: 420px; /* keep list scrollable if long */
        overflow-y: auto;
    }

    .user-row {
        display: grid;
        grid-template-columns: 1fr 140px;
        align-items: center;
        gap: .5rem;
    }

    .list-item-btn {
        width: 100%;
        text-align: left;
        border: none;
        background: transparent;
        padding: .5rem .75rem;
        border-bottom: 1px solid #f1f1f1;
    }

    .list-item-btn:last-child {
        border-bottom: none;
    }

    .list-item-btn:hover {
        background-color: #f1f7ff;
    }

    .list-item-btn.active {
        background-color: #e9f0ff;
        font-weight: 600;
    }

    .user-role {
        white-space: nowrap;
        padding-left: .5rem;
    }

    /* keep header labels aligned with content on small screens */
    @@media (max-width: 576px) {
        .user-list-header,
        .user-row {
            grid-template-columns: 1fr 110px;
        }
    }
</style>
