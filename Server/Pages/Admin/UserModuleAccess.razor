@page "/admin/user-module-access"
@using Server.Models
@using Server.Services
@inject UserModuleAccessService UserModuleAccessService
@inject NavigationManager Navigation
@inject ILogger<UserModuleAccess> Logger

@attribute [Authorize(Roles = "Admin")]

<h3>Manage User Module Access</h3>

<div class="row">
    <div class="col-md-4">
        <div class="mb-2">
            <input class="form-control" placeholder="Search users..." @bind="searchTerm" />
        </div>

        @if (users == null)
        {
            <p>Loading users...</p>
        }
        else
        {
            <div class="list-group">
                @foreach (var user in FilteredUsers)
                {
                    <button class="list-group-item list-group-item-action @(selectedUser?.Id == user.Id ? "active" : "")"
                            @onclick="() => SelectUser(user)">
                        <div class="d-flex w-100 justify-content-between">
                            <strong>@user.FullName</strong>
                            <small class="text-muted">@user.Email</small>
                        </div>
                    </button>
                }
            </div>
        }
    </div>

    <div class="col-md-8">
        @if (selectedUser == null)
        {
            <p class="text-muted">Select a user on the left to configure module access.</p>
        }
        else if (modules == null)
        {
            <p>Loading modules...</p>
        }
        else
        {
            <div class="card">
                <div class="card-header">
                    Configuring access for: <strong>@selectedUser.FullName</strong> (@selectedUser.Email)
                </div>
                <div class="card-body">
                    @foreach (var module in modules)
                    {
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox"
                                       id="@($"module_{module.Id}")"
                                       @bind="currentAccess.Modules[module.Id]" />
                                <label class="form-check-label" for="@($"module_{module.Id}")">
                                    @module.Name
                                </label>
                            </div>

                            @if (module.Submodules?.Any() == true)
                            {
                                <div class="ms-4 mt-2">
                                    <ul class="list-unstyled mb-0">
                                        @foreach (var sub in module.Submodules)
                                        {
                                            <li>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox"
                                                           id="@($"sub_{sub.Id}")"
                                                           @bind="currentAccess.Submodules[sub.Id]" />
                                                    <label class="form-check-label" for="@($"sub_{sub.Id}")">
                                                        @sub.Name
                                                    </label>
                                                </div>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="card-footer d-flex justify-content-end">
                    <button class="btn btn-secondary me-2" @onclick="ReloadUserAccess" type="button">Reload</button>
                    <button class="btn btn-primary" @onclick="SaveAccess" type="button">Save</button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<ApplicationUser> users = null!;
    private List<Module> modules = null!;
    private string searchTerm = "";
    private ApplicationUser? selectedUser;
    private UserAccessViewModel currentAccess = new();
    private readonly Dictionary<string, UserAccessViewModel> accessCache = new();

    private IEnumerable<ApplicationUser> FilteredUsers =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? users
            : users.Where(u => (u.FullName ?? "").Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                            || (u.Email ?? "").Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        users = await UserModuleAccessService.GetUsersAsync();
        modules = await UserModuleAccessService.GetModulesAsync();
    }

    private async Task SelectUser(ApplicationUser user)
    {
        if (selectedUser?.Id == user.Id)
            return;

        selectedUser = user;

        if (accessCache.TryGetValue(user.Id, out var cached))
        {
            currentAccess = CloneAccess(cached);
            return;
        }

        // Initialize default access structure
        currentAccess = new UserAccessViewModel
        {
            Modules = modules.ToDictionary(m => m.Id, _ => false),
            Submodules = modules.SelectMany(m => m.Submodules ?? Enumerable.Empty<Submodule>())
                                .ToDictionary(s => s.Id, _ => false)
        };

        // Load allowed modules and submodules for the selected user
        var allowedModules = await UserModuleAccessService.GetAllowedModulesAsync(user.Id);
        foreach (var am in allowedModules)
        {
            if (currentAccess.Modules.ContainsKey(am.Id))
                currentAccess.Modules[am.Id] = true;

            // load submodules for this module
            var allowedSubs = await UserModuleAccessService.GetAllowedSubmodulesAsync(user.Id, am.Id);
            foreach (var sub in allowedSubs)
            {
                if (currentAccess.Submodules.ContainsKey(sub.Id))
                    currentAccess.Submodules[sub.Id] = true;
            }
        }

        // Cache the initial loaded state
        accessCache[user.Id] = CloneAccess(currentAccess);
    }

    private async Task SaveAccess()
    {
        Logger.LogInformation("SaveAccess invoked. selectedUserId = {UserId}", selectedUser?.Id);

        if (selectedUser == null)
        {
            Logger.LogWarning("SaveAccess aborted: no selected user.");
            return;
        }

        try
        {
            await UserModuleAccessService.SaveUserAccessAsync(selectedUser.Id, currentAccess);
            accessCache[selectedUser.Id] = CloneAccess(currentAccess);
            Logger.LogInformation("SaveAccess completed for user {UserId}", selectedUser.Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "SaveAccess failed for user {UserId}", selectedUser.Id);
            throw;
        }
    }

    private async Task ReloadUserAccess()
    {
        if (selectedUser == null) return;
        accessCache.Remove(selectedUser.Id);
        await SelectUser(selectedUser);
    }

    private static UserAccessViewModel CloneAccess(UserAccessViewModel src)
    {
        return new UserAccessViewModel
        {
            Modules = src.Modules.ToDictionary(kv => kv.Key, kv => kv.Value),
            Submodules = src.Submodules.ToDictionary(kv => kv.Key, kv => kv.Value)
        };
    }
}