@page "/subjects"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Server.Models
@using Server.Services
@inject SubjectService SubjectService
@inject ILocalizationService LocalizationService
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>@pageTitle</PageTitle>

<div class="container-fluid px-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="me-4">@pageTitle</h1>
                <div>
                    <span class="me-3">Welcome, @currentUser?.FullName!</span>
                    <button class="btn btn-success" @onclick="CreateNewSubject">
                        <i class="fas fa-plus"></i> @newSubjectText
                    </button>
                </div>
            </div>

            <!-- Search and Filter Section -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search subjects..."
                               @bind="searchTerm" @onkeypress="HandleKeyPress" />
                        <button class="btn btn-primary" @onclick="SearchSubjects">
                            <i class="fas fa-search"></i> @searchButtonText
                        </button>
                    </div>
                </div>
                <div class="col-md-3">
                    <select class="form-select" @onchange="OnTypeChanged">
                        <option value="">All Types</option>
                        <option value="buyer">Buyers</option>
                        <option value="supplier">Suppliers</option>
                        <option value="international">International</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" checked="@showInactive" @onchange="OnShowInactiveChanged" />
                        <label class="form-check-label">Show Inactive</label>
                    </div>
                </div>
            </div>

            <!-- Subjects Table -->
            <div class="card">
                <div class="card-body">
                    @if (subjects.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>@codeHeader</th>
                                        <th>@subjectNameHeader</th>
                                        <th>@nuiFiscalHeader</th>
                                        <th>@contactHeader</th>
                                        <th>@typeHeader</th>
                                        <th>@statusHeader</th>
                                        <th>@actionsHeader</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var subject in subjects)
                                    {
                                        <tr class="@(subject.IsActive ? "" : "table-secondary")">
                                            <td><code>@subject.Code</code></td>
                                            <td>
                                                <div class="fw-bold">@subject.SubjectName</div>
                                                <small class="text-muted">@subject.Description</small>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(subject.NUI))
                                                {
                                                    <div>NUI: @subject.NUI</div>
                                                }
                                                @if (!string.IsNullOrEmpty(subject.FiscalNr))
                                                {
                                                    <div>Fiscal: @subject.FiscalNr</div>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(subject.ContactPerson))
                                                {
                                                    <div>@subject.ContactPerson</div>
                                                }
                                                @if (!string.IsNullOrEmpty(subject.Telephone))
                                                {
                                                    <div>📞 @subject.Telephone</div>
                                                }
                                                @if (!string.IsNullOrEmpty(subject.Email))
                                                {
                                                    <div>📧 @subject.Email</div>
                                                }
                                            </td>
                                            <td>
                                                @if (subject.IsBuyer)
                                                {
                                                    <span class="badge bg-info me-1">Buyer</span>
                                                }
                                                @if (subject.IsFurnitor)
                                                {
                                                    <span class="badge bg-success me-1">Supplier</span>
                                                }
                                                @if (subject.IsInternationalSubject)
                                                {
                                                    <span class="badge bg-warning me-1">International</span>
                                                }
                                                @if (subject.IsSubjectWithoutVAT)
                                                {
                                                    <span class="badge bg-secondary">No VAT</span>
                                                }
                                            </td>
                                            <td>
                                                @if (subject.IsActive)
                                                {
                                                    <span class="badge bg-success">Active</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">Inactive</span>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-primary me-1"
                                                        @onclick="() => ViewSubject(subject.Id)">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-secondary me-1"
                                                        @onclick="() => EditSubject(subject.Id)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            No subjects found.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ApplicationUser? currentUser;
    private List<Subject> subjects = new();
    private string searchTerm = string.Empty;
    private string selectedType = string.Empty;
    private bool showInactive = false;

    private string pageTitle = string.Empty;
    private string newSubjectText = "New Subject";
    private string searchButtonText = "Search";
    private string basicInfoHeader = string.Empty;
    private string contactInfoHeader = string.Empty;
    private string subjectTypesHeader = string.Empty;
    private string nuiLabel = string.Empty;
    private string fiscalNrLabel = string.Empty;
    private string contactPersonLabel = string.Empty;
    private string addressLabel = string.Empty;
    private string telephoneLabel = string.Empty;
    private string emailLabel = string.Empty;
    private string websiteLabel = string.Empty;
    private string backButtonText = string.Empty;
    private string editButtonText = string.Empty;
    private string restoreButtonText = string.Empty;
    private string notFoundTitle = string.Empty;
    private string notFoundMessage = string.Empty;

    private string codeHeader = string.Empty;
    private string subjectNameHeader = string.Empty;
    private string nuiFiscalHeader = string.Empty;
    private string contactHeader = string.Empty;
    private string typeHeader = string.Empty;
    private string statusHeader = string.Empty;
    private string actionsHeader = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            currentUser = await UserManager.GetUserAsync(authState.User);
        }

        var languageId = await LocalizationService.GetDefaultLanguageId();

        pageTitle = LocalizationService.GetString("STRING_00098", languageId) ?? "Subjects";
        newSubjectText = LocalizationService.GetString("STRING_00100", languageId) ?? "New Subject";
        searchButtonText = LocalizationService.GetString("STRING_00004", languageId) ?? "Search";

        codeHeader = LocalizationService.GetString("STRING_00033", languageId) ?? "Code";
        subjectNameHeader = LocalizationService.GetString("STRING_00034", languageId) ?? "Name";
        nuiFiscalHeader = LocalizationService.GetString("STRING_00080", languageId) ?? "NUI/Fiscal";
        contactHeader = LocalizationService.GetString("STRING_00082", languageId) ?? "Contact";
        typeHeader = LocalizationService.GetString("STRING_00104", languageId) ?? "Type";
        statusHeader = LocalizationService.GetString("STRING_00038", languageId) ?? "Status";
        actionsHeader = LocalizationService.GetString("STRING_00039", languageId) ?? "Actions";

        basicInfoHeader = LocalizationService.GetString("STRING_00077", languageId) ?? "Basic Information";
        contactInfoHeader = LocalizationService.GetString("STRING_00078", languageId) ?? "Contact Information";
        subjectTypesHeader = LocalizationService.GetString("STRING_00079", languageId) ?? "Subject Types";
        
        nuiLabel = LocalizationService.GetString("STRING_00080", languageId) ?? "NUI";
        fiscalNrLabel = LocalizationService.GetString("STRING_00081", languageId) ?? "Fiscal Nr";
        contactPersonLabel = LocalizationService.GetString("STRING_00082", languageId) ?? "Contact Person";
        addressLabel = LocalizationService.GetString("STRING_00083", languageId) ?? "Address";
        telephoneLabel = LocalizationService.GetString("STRING_00084", languageId) ?? "Telephone";
        emailLabel = LocalizationService.GetString("STRING_00085", languageId) ?? "Email";
        websiteLabel = LocalizationService.GetString("STRING_00086", languageId) ?? "Website";
        
        backButtonText = LocalizationService.GetString("STRING_00087", languageId) ?? "Back";
        editButtonText = LocalizationService.GetString("STRING_00088", languageId) ?? "Edit";
        restoreButtonText = LocalizationService.GetString("STRING_00089", languageId) ?? "Restore";

        notFoundTitle = LocalizationService.GetString("STRING_00090", languageId) ?? "Not Found";
        notFoundMessage = LocalizationService.GetString("STRING_00091", languageId) ?? "Subject not found";

        await LoadSubjects();
    }

    private async Task LoadSubjects()
    {
        subjects = await SubjectService.GetAllSubjectsAsync(showInactive);
    }

    private async Task SearchSubjects()
    {
        subjects = await SubjectService.SearchSubjectsAsync(searchTerm, showInactive);
    }

    private async Task OnTypeChanged(ChangeEventArgs e)
    {
        selectedType = e.Value?.ToString() ?? string.Empty;
        
        subjects = selectedType switch
        {
            "buyer" => await SubjectService.GetBuyersAsync(showInactive),
            "supplier" => await SubjectService.GetSuppliersAsync(showInactive),
            "international" => await SubjectService.GetInternationalSubjectsAsync(showInactive),
            _ => await SubjectService.GetAllSubjectsAsync(showInactive)
        };
    }

    private async Task OnShowInactiveChanged(ChangeEventArgs e)
    {
        showInactive = bool.Parse(e.Value?.ToString() ?? "false");
        await LoadSubjects();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchSubjects();
        }
    }

    private void ViewSubject(int id)
    {
        Navigation.NavigateTo($"/subjects/{id}");
    }

    private void EditSubject(int id)
    {
        Navigation.NavigateTo($"/subjects/edit/{id}");
    }

    private void CreateNewSubject()
    {
        Navigation.NavigateTo("/subjects/create");
    }
}