@page "/sales/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Server.Models
@using Server.Services
@using System.Security.Claims
@inject SalesService SalesService
@inject ILocalizationService LocalizationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject StateContainer StateContainer
@inject ILogger<NavMenu> Logger
@attribute [Authorize]

<PageTitle>Invoice Details</PageTitle>

@if (invoice != null)
{
    <div class="container-fluid px-4">
        <div class="row">
            <div class="col-12">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">
                            <a href="/sales">Sales</a>
                        </li>
                        <li class="breadcrumb-item active">Invoice #@invoice.Id</li>
                    </ol>
                </nav>

                <div class="card shadow-sm">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h3 class="mb-0">Invoice #@invoice.InvoiceNumber</h3>
                        <div>
                            @if (invoice.IsCancelled)
                            {
                                <span class="badge bg-danger me-2">Cancelled</span>
                            }
                            else if (invoice.IsPosted)
                            {
                                <span class="badge bg-success me-2">Posted</span>
                            }
                            else
                            {
                                <span class="badge bg-warning me-2">Draft</span>
                            }
                            
                            @if (!invoice.IsPosted && !invoice.IsCancelled)
                            {
                                <button class="btn btn-primary btn-sm" @onclick="EditInvoice">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                            }
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h5 class="border-bottom pb-2">Invoice Information</h5>
                                <table class="table table-borderless">
                                    <tr>
                                        <td class="text-muted" style="width:40%">Invoice Number:</td>
                                        <td class="fw-bold">@invoice.InvoiceNumber</td>
                                    </tr>
                                    <tr>
                                        <td class="text-muted">Invoice Date:</td>
                                        <td>@invoice.InvoiceDate.ToShortDateString()</td>
                                    </tr>
                                    @if (invoice.InvoiceExpiryDate.HasValue)
                                    {
                                        <tr>
                                            <td class="text-muted">Expiry Date:</td>
                                            <td>@invoice.InvoiceExpiryDate.Value.ToShortDateString()</td>
                                        </tr>
                                    }
                                    <tr>
                                        <td class="text-muted">Created At:</td>
                                        <td>@invoice.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                    </tr>
                                    @if (invoice.LastModifiedAt.HasValue)
                                    {
                                        <tr>
                                            <td class="text-muted">Last Modified:</td>
                                            <td>@invoice.LastModifiedAt.Value.ToString("yyyy-MM-dd HH:mm")</td>
                                        </tr>
                                    }
                                    @if (invoice.IsCancelled && !string.IsNullOrEmpty(invoice.CancellationReason))
                                    {
                                        <tr>
                                            <td class="text-muted">Cancellation Reason:</td>
                                            <td class="text-danger">@invoice.CancellationReason</td>
                                        </tr>
                                    }
                                </table>
                            </div>
                            <div class="col-md-6">
                                <h5 class="border-bottom pb-2">Buyer Information</h5>
                                <table class="table table-borderless">
                                    <tr>
                                        <td class="text-muted" style="width:30%">Name:</td>
                                        <td class="fw-bold">@invoice.BuyerName</td>
                                    </tr>
                                    <tr>
                                        <td class="text-muted">Code:</td>
                                        <td>@invoice.BuyerCode</td>
                                    </tr>
                                    @if (invoice.Buyer != null)
                                    {
                                        @if (!string.IsNullOrEmpty(invoice.Buyer.Address))
                                        {
                                            <tr>
                                                <td class="text-muted">Address:</td>
                                                <td>@invoice.Buyer.Address</td>
                                            </tr>
                                        }
                                    }
                                </table>
                            </div>
                        </div>

                        <h5 class="border-bottom pb-2">Invoice Items</h5>
                        <div class="table-responsive mb-4">
                            <table class="table table-bordered table-striped">
                                <thead class="table-light">
                                    <tr>
                                        <th>#</th>
                                        <th>Code</th>
                                        <th>Description</th>
                                        <th class="text-end">QTY</th>
                                        <th class="text-center">Unit</th>
                                        <th class="text-end">Price Excl.</th>
                                        <th class="text-end">Discount %</th>
                                        <th class="text-end">VAT %</th>
                                        <th class="text-end">Value Excl.</th>
                                        <th class="text-end">Value Incl.</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (invoice.Items != null && invoice.Items.Any())
                                    {
                                        @foreach (var (item, index) in invoice.Items.Select((item, i) => (item, i + 1)))
                                        {
                                            <tr>
                                                <td class="text-center">@index</td>
                                                <td>@item.ArticleCode</td>
                                                <td>@item.Description</td>
                                                <td class="text-end">@item.Quantity.ToString("F2")</td>
                                                <td class="text-center">@item.UnitCode</td>
                                                <td class="text-end">@item.PriceWithoutVAT.ToString("F2") @item.CurrencyCode</td>
                                                <td class="text-end">@item.DiscountPercent.ToString("F2")%</td>
                                                <td class="text-end">@item.VATPercent.ToString("F2")%</td>
                                                <td class="text-end">@item.ValueWithoutVAT.ToString("F2") @item.CurrencyCode</td>
                                                <td class="text-end">@item.ValueWithVAT.ToString("F2") @item.CurrencyCode</td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="10" class="text-center">No items found</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr class="bg-light fw-bold">
                                        <td colspan="8" class="text-end">Totals:</td>
                                        <td class="text-end">@invoice.TotalWithoutVAT.ToString("F2")</td>
                                        <td class="text-end">@invoice.TotalWithVAT.ToString("F2")</td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>

                        <div class="row">
                            <div class="col-md-6 offset-md-6">
                                <div class="card">
                                    <div class="card-header bg-dark text-white">
                                        <h5 class="mb-0">Invoice Summary</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Subtotal before discount:</span>
                                            <span class="fw-bold">@((invoice.TotalWithoutVAT + invoice.TotalDiscountAmount).ToString("F2"))</span>
                                        </div>
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Total Discounts:</span>
                                            <span class="fw-bold text-danger">-@invoice.TotalDiscountAmount.ToString("F2")</span>
                                        </div>
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>Net Amount:</span>
                                            <span class="fw-bold">@invoice.TotalWithoutVAT.ToString("F2")</span>
                                        </div>
                                        <div class="d-flex justify-content-between mb-3">
                                            <span>Total VAT:</span>
                                            <span class="fw-bold">@invoice.TotalVATAmount.ToString("F2")</span>
                                        </div>
                                        <div class="bg-success text-white p-3 rounded">
                                            <div class="d-flex justify-content-between">
                                                <span class="h5 mb-0">TOTAL DUE:</span>
                                                <span class="h5 mb-0">@invoice.TotalWithVAT.ToString("F2")</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <div class="d-flex justify-content-between">
                            <button class="btn btn-secondary" @onclick="GoBack">
                                <i class="fas fa-arrow-left"></i> Back to Sales
                            </button>
                            <div>
                                @if (!invoice.IsPosted && !invoice.IsCancelled)
                                {
                                    <button class="btn btn-success me-2" @onclick="PostInvoice">
                                        <i class="fas fa-check-circle"></i> Post Invoice
                                    </button>
                                    <button class="btn btn-danger me-2" @onclick="CancelInvoice">
                                        <i class="fas fa-times-circle"></i> Cancel
                                    </button>
                                    <button class="btn btn-primary me-2" @onclick="EditInvoice">
                                        <i class="fas fa-edit"></i> Edit
                                    </button>
                                }
                                <button class="btn btn-info" @onclick="PrintInvoice">
                                    <i class="fas fa-print"></i> Print
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else if (loading)
{
    <div class="text-center p-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning m-5">
        <h4>Invoice Not Found</h4>
        <p>The invoice you're looking for doesn't exist or has been removed.</p>
        <a href="/sales" class="btn btn-primary">Back to Sales</a>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }

    private Server.Models.SalesInvoice? invoice;
    private bool loading = true;
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            
            invoice = await SalesService.GetSaleByIdAsync(Id);

            if (invoice != null && invoice.SalesCategoryId > 0)
            {
                try
                {
                    var categories = await StateContainer.GetSalesCategoriesAsync();
                    var category = categories.FirstOrDefault(c => c.Id == invoice.SalesCategoryId);
                    if (category?.Code != null)
                    {
                        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "currentSalesCategory", category.Code);
                        await JSRuntime.InvokeVoidAsync("dispatchEvent", new object[] { new { type = "storage" } });
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error setting category: {ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading invoice", ex.Message);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task GoBack()
    {
        try
        {
            var categories = await StateContainer.GetSalesCategoriesAsync();
            var category = categories.FirstOrDefault(c => c.Id == invoice.SalesCategoryId);
            
            if (category?.Code != null)
            {
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "currentSalesCategory", category.Code);
                
                var categoryRoute = GetCategoryRoute(category.Code);
                Navigation.NavigateTo($"/{categoryRoute}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "currentSalesCategory");
                Navigation.NavigateTo("/sales");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "currentSalesCategory");
            Navigation.NavigateTo("/sales");
        }
    }

    private string GetCategoryRoute(string code)
    {
        return code.ToLower() switch
        {
            "dom" => "sales/domestic",
            "cash" => "sales/cash",
            "exp" => "sales/export",
            "del" => "sales/delivery",
            "serv" => "sales/service",
            "cn" => "sales/credit-note",
            "ret" => "sales/returns",
            "other" => "sales/other",
            "sum" => "sales/summary",
            "print" => "sales/printing",
            "bar" => "sales/barcode",
            _ => "sales"
        };
    }

    private void EditInvoice()
    {
        if (invoice != null && !invoice.IsPosted && !invoice.IsCancelled)
        {
            Navigation.NavigateTo($"/sales/edit/{Id}");
        }
    }

    private async Task PostInvoice()
    {
        if (invoice == null || invoice.IsPosted || invoice.IsCancelled || string.IsNullOrEmpty(userId))
            return;

        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to post this invoice? This action cannot be undone.");
            
            if (confirmed)
            {
                await SalesService.PostSaleAsync(Id, userId);
                
                invoice = await SalesService.GetSaleByIdAsync(Id);
                
                await JSRuntime.InvokeVoidAsync("alert", "Invoice posted successfully.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error posting invoice: {ex.Message}");
        }
    }

    private async Task CancelInvoice()
    {
        if (invoice == null || invoice.IsPosted || invoice.IsCancelled || string.IsNullOrEmpty(userId))
            return;

        try
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this invoice?");
            
            if (confirmed)
            {
                string reason = await JSRuntime.InvokeAsync<string>("prompt", "Please provide a reason for cancellation:", "");
                
                if (!string.IsNullOrWhiteSpace(reason))
                {
                    await SalesService.CancelSaleAsync(Id, reason, userId);
                    
                    invoice = await SalesService.GetSaleByIdAsync(Id);
                    
                    await JSRuntime.InvokeVoidAsync("alert", "Invoice cancelled successfully.");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error cancelling invoice: {ex.Message}");
        }
    }

    private async Task PrintInvoice()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("window.print");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error printing invoice: {ex.Message}");
        }
    }
}