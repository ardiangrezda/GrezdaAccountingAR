@page "/sales"
@page "/sales/{category}"
@using Microsoft.AspNetCore.Authorization
@using Server.Models
@using Server.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject SalesService SalesService
@inject StateContainer StateContainer
@inject NavigationManager Navigation
@inject ILocalizationService LocalizationService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<div class="container-fluid px-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>@pageTitle</h1>
                <button class="btn btn-success" @onclick="CreateNewSale" disabled="@(categoryId == null)">
                    <i class="fas fa-plus"></i> @newSaleLabel
                </button>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (sales.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>@invoiceNumberLabel</th>
                                <th>@dateLabel</th>
                                <th>@buyerLabel</th>
                                <th>Total</th>
                                <th>@statusHeader</th>
                                <th>@actionsHeader</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var sale in sales)
                            {
                                <tr>
                                    <td>@sale.InvoiceNumber</td>
                                    <td>@sale.InvoiceDate.ToShortDateString()</td>
                                    <td>@sale.BuyerName</td>
                                    <td class="text-end">@sale.TotalWithVAT.ToString("N2")</td>
                                    <td>
                                        @if (sale.IsCancelled)
                                        {
                                            <span class="badge bg-danger">@cancelledLabel</span>
                                        }
                                        else if (sale.IsPosted)
                                        {
                                            <span class="badge bg-success">@postedLabel</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">@draftLabel</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <button class="btn btn-sm btn-info" @onclick="() => ViewSale(sale.Id)">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            @if (!sale.IsPosted && !sale.IsCancelled)
                                            {
                                                <button class="btn btn-sm btn-primary" @onclick="() => EditSale(sale.Id)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    No sales invoices found for your account. Click the "New Sale" button to create one.
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? Category { get; set; }

    private List<Server.Models.SalesInvoice> sales = new();
    private bool isLoading = true;
    private string pageTitle = "Sales";
    private int? categoryId;
    private string? currentUserId;
    private int? currentBusinessUnitId;

    // Localization variables
    private string invoiceNumberLabel = string.Empty;
    private string dateLabel = string.Empty;
    private string totalLabel = string.Empty;
    private string buyerLabel = string.Empty;
    private string statusHeader = string.Empty;
    private string actionsHeader = string.Empty;
    private string allSalesLabel = string.Empty;
    private string newSaleLabel = string.Empty;
    private string draftLabel = string.Empty;
    private string cancelledLabel = string.Empty;
    private string postedLabel = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        await GetCurrentUserAndBusinessUnit();
        
        await SetCategoryId();
        await LoadSales();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadLocalizationStrings();
    }

    private async Task LoadLocalizationStrings()
    {
        var languageId = await LocalizationService.GetDefaultLanguageId();
        invoiceNumberLabel = LocalizationService.GetString("STRING_00139", languageId) ?? "Invoice #";
        dateLabel = LocalizationService.GetString("STRING_00140", languageId) ?? "Date";
        totalLabel = LocalizationService.GetString("STRING_00141", languageId) ?? "Total";
        buyerLabel = LocalizationService.GetString("STRING_00054", languageId) ?? "Buyer";
        statusHeader = LocalizationService.GetString("STRING_00038", languageId) ?? "Status";
        actionsHeader = LocalizationService.GetString("STRING_00039", languageId) ?? "Actions";
        allSalesLabel = LocalizationService.GetString("STRING_00155", languageId) ?? "All Sales";
        newSaleLabel = LocalizationService.GetString("STRING_00145", languageId) ?? "New Sale";
        draftLabel = LocalizationService.GetString("STRING_00158", languageId) ?? "Draft";
        cancelledLabel = LocalizationService.GetString("STRING_00156", languageId) ?? "Cancelled";
        postedLabel = LocalizationService.GetString("STRING_00157", languageId) ?? "Posted";
    }

    private async Task GetCurrentUserAndBusinessUnit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        var businessUnitIdString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "currentBusinessUnit");
        if (!string.IsNullOrEmpty(businessUnitIdString) && int.TryParse(businessUnitIdString, out var businessUnitId))
        {
            currentBusinessUnitId = businessUnitId;
        }
    }

    private async Task SetCategoryId()
    {
        if (string.IsNullOrEmpty(Category))
        {
            categoryId = null;
            pageTitle = allSalesLabel;
            return;
        }

        var categories = await StateContainer.GetSalesCategoriesAsync();
        var categoryCode = Category?.ToUpper() switch
        {
            "DOMESTIC" => "DOM",
            "CASH" => "CASH",
            "EXPORT" => "EXP",
            "DELIVERY" => "DEL",
            "SERVICE" => "SERV",
            "CREDIT-NOTE" => "CN",
            "RETURNS" => "RET",
            "OTHER" => "OTHER",
            "SUMMARY" => "SUM",
            "PRINTING" => "PRINT",
            "BARCODE" => "BAR",
            _ => null
        };

        var category = categories.FirstOrDefault(c => c.Code == categoryCode);
        if (category != null)
        {
            categoryId = category.Id;
            pageTitle = await GetLocalizedCategoryName(category) ?? "Sales";
        }
    }

    private async Task<string?> GetLocalizedCategoryName(SalesCategory category)
    {
        if (category?.NameString?.StringKey == null) return null;
        var languageId = await LocalizationService.GetDefaultLanguageId();
        return LocalizationService.GetString(category.NameString.StringKey, languageId);
    }

    private async Task LoadSales()
    {
        try
        {
            isLoading = true;
            
            var allSales = await SalesService.GetAllSalesAsync(
                businessUnitId: currentBusinessUnitId,
                userId: currentUserId,
                includePosted: false,
                categoryId: categoryId
            );
            
            sales = allSales;
        }
        catch (Exception)
        {
            // TODO: Add error handling
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CreateNewSale()
    {
        if (categoryId.HasValue)
        {
            var categories = await StateContainer.GetSalesCategoriesAsync();
            var category = categories.FirstOrDefault(c => c.Id == categoryId.Value);
            
            await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "selectedSalesCategoryId", categoryId.Value);
            
            if (category?.Code != null)
            {
                await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", "currentSalesCategory", category.Code);
            }
        }
        
        Navigation.NavigateTo("/sales/create");
    }

    private void ViewSale(int id)
    {
        Navigation.NavigateTo($"/sales/{id}");
    }

    private void EditSale(int id)
    {
        Navigation.NavigateTo($"/sales/edit/{id}");
    }
}