@using Server.Models
@using Server.Services

<div class="modal @(Show ? "show d-block" : "d-none")" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Invoice Item</h5>
                <button type="button" class="btn-close" @onclick="OnCancel"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@item" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    
                    <div class="mb-3">
                        <label class="form-label">Article Code</label>
                        <div class="input-group">
                            <InputText @bind-Value="item.ArticleCode" class="form-control" />
                            <button class="btn btn-outline-secondary" type="button" @onclick="SearchArticle">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                        <ValidationMessage For="@(() => item.ArticleCode)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputText @bind-Value="item.Description" class="form-control" />
                        <ValidationMessage For="@(() => item.Description)" />
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Quantity</label>
                                <InputNumber @bind-Value="item.Quantity" class="form-control" />
                                <ValidationMessage For="@(() => item.Quantity)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Unit</label>
                                <InputText @bind-Value="item.UnitCode" class="form-control" readonly />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Price</label>
                                <InputNumber @bind-Value="item.PriceWithoutVAT" class="form-control" />
                                <ValidationMessage For="@(() => item.PriceWithoutVAT)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Discount %</label>
                                <InputNumber @bind-Value="item.DiscountPercent" class="form-control" />
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="OnCancel">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="HandleSubmit">Add Item</button>
            </div>
        </div>
    </div>
</div>

@if (Show)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private SalesInvoiceItem item = new();

    [Parameter]
    public bool Show { get; set; }

    [Parameter]
    public EventCallback<bool> ShowChanged { get; set; }

    [Parameter]
    public EventCallback<SalesInvoiceItem> OnItemAdded { get; set; }

    private async Task HandleSubmit()
    {
        // Calculate values
        item.ValueWithoutVAT = item.Quantity * item.PriceWithoutVAT;
        item.DiscountAmount = item.ValueWithoutVAT * (item.DiscountPercent / 100);
        item.VATAmount = (item.ValueWithoutVAT - item.DiscountAmount) * (item.VATPercent / 100);
        item.ValueWithVAT = item.ValueWithoutVAT - item.DiscountAmount + item.VATAmount;

        await OnItemAdded.InvokeAsync(item);
        await OnCancel();
    }

    private async Task SearchArticle()
    {
        // TODO: Implement article search
    }

    private async Task OnCancel()
    {
        item = new SalesInvoiceItem();
        await ShowChanged.InvokeAsync(false);
    }
}