@page "/articles/create"
@page "/articles/edit/{Id:int}"
@using Server.Models
@using Server.Services
@inject ArticleService ArticleService
@inject NavigationManager Navigation
@inject ILocalizationService LocalizationService
@attribute [Authorize]

<PageTitle>@(IsEdit ? "Edit Article" : "Create Article")</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-12">
            <h2>@(IsEdit ? "Edit Article" : "Create New Article")</h2>

            <div class="card">
                <div class="card-body">
                    <EditForm Model="article" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="code" class="form-label">@codeLabel *</label>
                                    <InputText id="code" @bind-Value="article.Code" class="form-control" />
                                    <ValidationMessage For="@(() => article.Code)" />
                                </div>

                                <div class="mb-3">
                                    <label for="barcode" class="form-label">@barcodeLabel</label>
                                    <InputText id="barcode" @bind-Value="article.Barcode" class="form-control" />
                                    <ValidationMessage For="@(() => article.Barcode)" />
                                </div>

                                <div class="mb-3">
                                    <label for="description" class="form-label">@descriptionLabel *</label>
                                    <InputText id="description" @bind-Value="article.Description" class="form-control" />
                                    <ValidationMessage For="@(() => article.Description)" />
                                </div>

                                <div class="mb-3">
                                    <label for="description2" class="form-label">@description2Label</label>
                                    <InputText id="description2" @bind-Value="article.Description2" class="form-control" />
                                </div>

                                <div class="mb-3">
                                    <label for="description3" class="form-label">@description3Label</label>
                                    <InputText id="description3" @bind-Value="article.Description3" class="form-control" />
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="category" class="form-label">@categoryLabel</label>
                                    <InputText id="category" @bind-Value="article.Category" class="form-control" />
                                    <ValidationMessage For="@(() => article.Category)" />
                                </div>

                                <div class="mb-3">
                                    <label for="unit" class="form-label">@unitLabel *</label>
                                    <InputSelect id="unit" @bind-Value="article.UnitId" class="form-select">
                                        <option value="">Select Unit</option>
                                        @foreach (var unit in units)
                                        {
                                            <option value="@unit.UnitId">@unit.Description (@unit.Code)</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => article.UnitId)" />
                                </div>

                                <div class="mb-3">
                                    <label for="price" class="form-label">@priceLabel *</label>
                                    <InputNumber id="price" @bind-Value="article.Price" class="form-control" />
                                    <ValidationMessage For="@(() => article.Price)" />
                                </div>

                                <div class="mb-3">
                                    <label for="currency" class="form-label">@currencyLabel *</label>
                                    <InputSelect id="currency" @bind-Value="article.CurrencyId" class="form-select">
                                        <option value="">Select Currency</option>
                                        @foreach (var currency in currencies)
                                        {
                                            <option value="@currency.CurrencyId">@currency.Code - @currency.Name</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => article.CurrencyId)" />
                                </div>

                                <div class="mb-3">
                                    <label for="vat" class="form-label">@vatTypeLabel *</label>
                                    <InputSelect id="vat" @bind-Value="article.VATId" class="form-select">
                                        <option value="">Select VAT Type</option>
                                        @foreach (var vat in vatTypes)
                                        {
                                            <option value="@vat.VATId">@vat.VATName (@vat.VATRate%)</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => article.VATId)" />
                                </div>

                                <div class="mb-3">
                                    <label for="stockQuantity" class="form-label">@stockQuantityLabel</label>
                                    <InputNumber id="stockQuantity" @bind-Value="article.StockQuantity" class="form-control" />
                                    <ValidationMessage For="@(() => article.StockQuantity)" />
                                </div>

                                <div class="mb-3 form-check">
                                    <InputCheckbox id="isActive" @bind-Value="article.IsActive" class="form-check-input" />
                                    <label class="form-check-label" for="isActive">@activeLabel</label>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">
                                <i class="fas fa-times"></i> Cancel
                            </button>
                            <div>
                                @if (IsEdit)
                                {
                                    <button type="button" class="btn btn-danger me-2" @onclick="ConfirmDeleteArticle">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                }
                                <button type="submit" class="btn btn-primary" disabled="@saving">
                                    @if (saving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    <i class="fas fa-save"></i> @(IsEdit ? "Update" : "Create") Article
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? Id { get; set; }

    private Article article = new();
    private List<Unit> units = new();
    private List<Currency> currencies = new();
    private List<VATTable> vatTypes = new();
    private bool saving = false;
    private bool codeExists = false;
    private bool barcodeExists = false;
    private string originalCode = string.Empty;
    private string originalBarcode = string.Empty;

    private string codeLabel = string.Empty;
    private string barcodeLabel = string.Empty;
    private string descriptionLabel = string.Empty;
    private string description2Label = string.Empty;
    private string description3Label = string.Empty;
    private string categoryLabel = string.Empty;
    private string unitLabel = string.Empty;
    private string priceLabel = string.Empty;
    private string currencyLabel = string.Empty;
    private string vatTypeLabel = string.Empty;
    private string stockQuantityLabel = string.Empty;
    private string activeLabel = string.Empty;

    private bool IsEdit => Id.HasValue;

    protected override async Task OnInitializedAsync()
    {
        var languageId = await LocalizationService.GetDefaultLanguageId();

        codeLabel = LocalizationService.GetString("STRING_00033", languageId) ?? "Code";
        barcodeLabel = LocalizationService.GetString("STRING_00010", languageId) ?? "Barcode";
        descriptionLabel = LocalizationService.GetString("STRING_00042", languageId) ?? "Description";
        description2Label = LocalizationService.GetString("STRING_00072", languageId) ?? "Description 2";
        description3Label = LocalizationService.GetString("STRING_00073", languageId) ?? "Description 3";
        categoryLabel = LocalizationService.GetString("STRING_00011", languageId) ?? "Category";
        unitLabel = LocalizationService.GetString("STRING_00012", languageId) ?? "Unit";
        priceLabel = LocalizationService.GetString("STRING_00013", languageId) ?? "Price";
        currencyLabel = LocalizationService.GetString("STRING_00074", languageId) ?? "Currency";
        vatTypeLabel = LocalizationService.GetString("STRING_00064", languageId) ?? "VAT Type";
        stockQuantityLabel = LocalizationService.GetString("STRING_00067", languageId) ?? "Stock Quantity";
        activeLabel = LocalizationService.GetString("STRING_00075", languageId) ?? "Active";

        await LoadUnits();
        await LoadCurrencies();
        await LoadVATTypes();

        if (IsEdit && Id.HasValue)
        {
            var existingArticle = await ArticleService.GetArticleByIdAsync(Id.Value);
            if (existingArticle != null)
            {
                article = existingArticle;
                originalCode = article.Code;
                originalBarcode = article.Barcode ?? string.Empty;
            }
            else
            {
                Navigation.NavigateTo("/articles");
            }
        }
        else
        {
            SetDefaultValues();
        }
    }

    private async Task LoadUnits()
    {
        units = await ArticleService.GetAllUnitsAsync();
    }

    private async Task LoadCurrencies()
    {
        currencies = await ArticleService.GetAllCurrenciesAsync();
    }

    private async Task LoadVATTypes()
    {
        vatTypes = await ArticleService.GetAllVATTypesAsync();
    }

    private void SetDefaultValues()
    {
        var defaultUnit = units.FirstOrDefault(u => u.Code == "pcs");
        if (defaultUnit != null)
        {
            article.UnitId = defaultUnit.UnitId;
        }

        var defaultCurrency = currencies.FirstOrDefault(c => c.Code == "EUR");
        if (defaultCurrency != null)
        {
            article.CurrencyId = defaultCurrency.CurrencyId;
        }

        var defaultVAT = vatTypes.FirstOrDefault(v => v.VATName.Contains("Standard"));
        if (defaultVAT != null)
        {
            article.VATId = defaultVAT.VATId;
        }

        article.IsActive = true;
    }

    private string GetCurrencyCode()
    {
        var currency = currencies.FirstOrDefault(c => c.CurrencyId == article.CurrencyId);
        return currency?.Code ?? "";
    }

    private decimal GetSelectedVATRate()
    {
        var vat = vatTypes.FirstOrDefault(v => v.VATId == article.VATId);
        return vat?.VATRate ?? 0;
    }

    private async Task HandleValidSubmit()
    {
        if (!IsEdit || article.Code != originalCode)
        {
            codeExists = await ArticleService.CheckCodeExistsAsync(article.Code, IsEdit ? Id : null);
            if (codeExists)
            {
                return;
            }
        }

        if (!string.IsNullOrWhiteSpace(article.Barcode) &&
            (!IsEdit || article.Barcode != originalBarcode))
        {
            barcodeExists = await ArticleService.CheckBarcodeExistsAsync(article.Barcode, IsEdit ? Id : null);
            if (barcodeExists)
            {
                return;
            }
        }

        saving = true;

        try
        {
            if (IsEdit)
            {
                var success = await ArticleService.UpdateArticleAsync(article);
                if (!success)
                {
                    Navigation.NavigateTo("/articles");
                    return;
                }
            }
            else
            {
                await ArticleService.CreateArticleAsync(article);
            }

            Navigation.NavigateTo("/articles");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving article: {ex.Message}");
        }
        finally
        {
            saving = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/articles");
    }

    private async Task ConfirmDeleteArticle()
    {
        await DeleteArticle();
    }

    private async Task DeleteArticle()
    {
        if (Id.HasValue)
        {
            saving = true;
            try
            {
                await ArticleService.DeleteArticleAsync(Id.Value);
                Navigation.NavigateTo("/articles");
            }
            finally
            {
                saving = false;
            }
        }
    }
}